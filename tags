!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#FSearchBox 	doc/html/search/search.css	/^#FSearchBox {$/;"	i
#FSearchBox #MSearchField 	doc/html/search/search.css	/^#FSearchBox #MSearchField {$/;"	i
#MSearchBox 	doc/html/search/search.css	/^#MSearchBox {$/;"	i
#MSearchBox .left{    display:block	doc/html/search/search.css	/^    display:block;$/;"	i
#MSearchBox .right 	doc/html/search/search.css	/^#MSearchBox .right {$/;"	i
#MSearchClose 	doc/html/search/search.css	/^#MSearchClose {$/;"	i
#MSearchField 	doc/html/search/search.css	/^#MSearchField {$/;"	i
#MSearchResultsWindow 	doc/html/search/search.css	/^#MSearchResultsWindow {$/;"	i
#MSearchSelect 	doc/html/search/search.css	/^#MSearchSelect {$/;"	i
#MSearchSelectWindow 	doc/html/search/search.css	/^#MSearchSelectWindow {$/;"	i
#SRIndex 	doc/html/search/search.css	/^#SRIndex {$/;"	i
#doc-content  	doc/html/doxygen.css	/^  {$/;"	i
#nav-path 	doc/html/doxygen.css	/^  #nav-path { display: none; }$/;"	i
#powerTip 	doc/html/doxygen.css	/^#powerTip {$/;"	i
#powerTip div 	doc/html/doxygen.css	/^#powerTip div {$/;"	i
#powerTip div.ttdeci 	doc/html/doxygen.css	/^#powerTip div.ttdeci {$/;"	i
#powerTip div.ttdoc 	doc/html/doxygen.css	/^#powerTip div.ttdoc {$/;"	i
#powerTip div.ttname 	doc/html/doxygen.css	/^#powerTip div.ttname {$/;"	i
#powerTip div.ttname a 	doc/html/doxygen.css	/^#powerTip div.ttname a {$/;"	i
#powerTip.e:after	doc/html/doxygen.css	/^#powerTip.e:after,  #powerTip.e:before,$/;"	i
#powerTip.e:after	doc/html/doxygen.css	/^#powerTip.e:after, #powerTip.e:before {$/;"	i
#powerTip.e:after	doc/html/doxygen.css	/^#powerTip.w:after,  #powerTip.e:after,$/;"	i
#powerTip.e:after 	doc/html/doxygen.css	/^#powerTip.e:after {$/;"	i
#powerTip.e:before	doc/html/doxygen.css	/^#powerTip.e:after,  #powerTip.e:before,$/;"	i
#powerTip.e:before	doc/html/doxygen.css	/^#powerTip.w:before,  #powerTip.e:before,$/;"	i
#powerTip.e:before 	doc/html/doxygen.css	/^#powerTip.e:after, #powerTip.e:before {$/;"	i
#powerTip.e:before 	doc/html/doxygen.css	/^#powerTip.e:before {$/;"	i
#powerTip.n:after	doc/html/doxygen.css	/^#powerTip.n:after,  #powerTip.n:before,$/;"	i
#powerTip.n:after	doc/html/doxygen.css	/^#powerTip.n:after,  #powerTip.s:after,$/;"	i
#powerTip.n:after	doc/html/doxygen.css	/^#powerTip.n:after, #powerTip.n:before {$/;"	i
#powerTip.n:after	doc/html/doxygen.css	/^#powerTip.n:after, #powerTip.ne:after, #powerTip.nw:after {$/;"	i
#powerTip.n:before	doc/html/doxygen.css	/^#powerTip.n:after,  #powerTip.n:before,$/;"	i
#powerTip.n:before	doc/html/doxygen.css	/^#powerTip.n:before,  #powerTip.s:before,$/;"	i
#powerTip.n:before 	doc/html/doxygen.css	/^#powerTip.n:after, #powerTip.n:before {$/;"	i
#powerTip.n:before 	doc/html/doxygen.css	/^#powerTip.n:before {$/;"	i
#powerTip.ne:after	doc/html/doxygen.css	/^#powerTip.n:after, #powerTip.ne:after, #powerTip.nw:after {$/;"	i
#powerTip.ne:after	doc/html/doxygen.css	/^#powerTip.ne:after, #powerTip.ne:before {$/;"	i
#powerTip.ne:after	doc/html/doxygen.css	/^#powerTip.ne:after, #powerTip.ne:before,$/;"	i
#powerTip.ne:after	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.ne:after,$/;"	i
#powerTip.ne:before	doc/html/doxygen.css	/^#powerTip.ne:after, #powerTip.ne:before,$/;"	i
#powerTip.ne:before	doc/html/doxygen.css	/^#powerTip.nw:before, #powerTip.ne:before,$/;"	i
#powerTip.ne:before 	doc/html/doxygen.css	/^#powerTip.ne:after, #powerTip.ne:before {$/;"	i
#powerTip.nw:after	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.ne:after,$/;"	i
#powerTip.nw:after	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.nw:before {$/;"	i
#powerTip.nw:after	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.nw:before,$/;"	i
#powerTip.nw:after 	doc/html/doxygen.css	/^#powerTip.n:after, #powerTip.ne:after, #powerTip.nw:after {$/;"	i
#powerTip.nw:before	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.nw:before,$/;"	i
#powerTip.nw:before	doc/html/doxygen.css	/^#powerTip.nw:before, #powerTip.ne:before,$/;"	i
#powerTip.nw:before 	doc/html/doxygen.css	/^#powerTip.nw:after, #powerTip.nw:before {$/;"	i
#powerTip.s:after	doc/html/doxygen.css	/^#powerTip.n:after,  #powerTip.s:after,$/;"	i
#powerTip.s:after	doc/html/doxygen.css	/^#powerTip.s:after,  #powerTip.s:before,$/;"	i
#powerTip.s:after	doc/html/doxygen.css	/^#powerTip.s:after, #powerTip.s:before {$/;"	i
#powerTip.s:after	doc/html/doxygen.css	/^#powerTip.s:after, #powerTip.se:after, #powerTip.sw:after {$/;"	i
#powerTip.s:before	doc/html/doxygen.css	/^#powerTip.n:before,  #powerTip.s:before,$/;"	i
#powerTip.s:before	doc/html/doxygen.css	/^#powerTip.s:after,  #powerTip.s:before,$/;"	i
#powerTip.s:before	doc/html/doxygen.css	/^#powerTip.s:before, #powerTip.se:before, #powerTip.sw:before {$/;"	i
#powerTip.s:before 	doc/html/doxygen.css	/^#powerTip.s:after, #powerTip.s:before {$/;"	i
#powerTip.se:after	doc/html/doxygen.css	/^#powerTip.s:after, #powerTip.se:after, #powerTip.sw:after {$/;"	i
#powerTip.se:after	doc/html/doxygen.css	/^#powerTip.se:after, #powerTip.se:before {$/;"	i
#powerTip.se:after	doc/html/doxygen.css	/^#powerTip.se:after, #powerTip.se:before,$/;"	i
#powerTip.se:after 	doc/html/doxygen.css	/^#powerTip.sw:after, #powerTip.se:after {$/;"	i
#powerTip.se:before	doc/html/doxygen.css	/^#powerTip.s:before, #powerTip.se:before, #powerTip.sw:before {$/;"	i
#powerTip.se:before	doc/html/doxygen.css	/^#powerTip.se:after, #powerTip.se:before,$/;"	i
#powerTip.se:before 	doc/html/doxygen.css	/^#powerTip.se:after, #powerTip.se:before {$/;"	i
#powerTip.se:before 	doc/html/doxygen.css	/^#powerTip.sw:before, #powerTip.se:before {$/;"	i
#powerTip.sw:after	doc/html/doxygen.css	/^#powerTip.sw:after, #powerTip.se:after {$/;"	i
#powerTip.sw:after	doc/html/doxygen.css	/^#powerTip.sw:after, #powerTip.sw:before {$/;"	i
#powerTip.sw:after 	doc/html/doxygen.css	/^#powerTip.s:after, #powerTip.se:after, #powerTip.sw:after {$/;"	i
#powerTip.sw:before	doc/html/doxygen.css	/^#powerTip.sw:before, #powerTip.se:before {$/;"	i
#powerTip.sw:before 	doc/html/doxygen.css	/^#powerTip.s:before, #powerTip.se:before, #powerTip.sw:before {$/;"	i
#powerTip.sw:before 	doc/html/doxygen.css	/^#powerTip.sw:after, #powerTip.sw:before {$/;"	i
#powerTip.w:after	doc/html/doxygen.css	/^#powerTip.w:after,  #powerTip.e:after,$/;"	i
#powerTip.w:after	doc/html/doxygen.css	/^#powerTip.w:after,  #powerTip.w:before,$/;"	i
#powerTip.w:after	doc/html/doxygen.css	/^#powerTip.w:after, #powerTip.w:before {$/;"	i
#powerTip.w:after 	doc/html/doxygen.css	/^#powerTip.w:after {$/;"	i
#powerTip.w:before	doc/html/doxygen.css	/^#powerTip.w:after,  #powerTip.w:before,$/;"	i
#powerTip.w:before	doc/html/doxygen.css	/^#powerTip.w:before,  #powerTip.e:before,$/;"	i
#powerTip.w:before 	doc/html/doxygen.css	/^#powerTip.w:after, #powerTip.w:before {$/;"	i
#powerTip.w:before 	doc/html/doxygen.css	/^#powerTip.w:before {$/;"	i
#powerTip:after 	doc/html/doxygen.css	/^#powerTip:before, #powerTip:after {$/;"	i
#powerTip:before	doc/html/doxygen.css	/^#powerTip:before, #powerTip:after {$/;"	i
#projectalign{        vertical-align: middle	doc/html/doxygen.css	/^        vertical-align: middle;$/;"	i
#projectbrief{	font: 120	doc/html/doxygen.css	/^	font: 120% Tahoma, Arial,sans-serif;$/;"	i
#projectlogo img{ 	border: 0px none	doc/html/doxygen.css	/^	border: 0px none;$/;"	i
#projectlogo{	text-align: center	doc/html/doxygen.css	/^	text-align: center;$/;"	i
#projectname{	font: 300	doc/html/doxygen.css	/^	font: 300% Tahoma, Arial,sans-serif;$/;"	i
#projectnumber{	font: 50	doc/html/doxygen.css	/^	font: 50% Tahoma, Arial,sans-serif;$/;"	i
#searchresults 	doc/html/search/search.css	/^#searchresults {$/;"	i
#side-nav 	doc/html/doxygen.css	/^  #side-nav { display: none; }$/;"	i
#titlearea{	padding: 0px	doc/html/doxygen.css	/^	padding: 0px;$/;"	i
#top 	doc/html/doxygen.css	/^  #top { display: none; }$/;"	i
.MSearchBoxActive #MSearchField 	doc/html/search/search.css	/^.MSearchBoxActive #MSearchField {$/;"	c
.SRChildren 	doc/html/search/search.css	/^.SRChildren {$/;"	c
.SREntry 	doc/html/search/search.css	/^.SREntry {$/;"	c
.SRPage .SRChildren 	doc/html/search/search.css	/^.SRPage .SRChildren {$/;"	c
.SRPage .SREntry 	doc/html/search/search.css	/^.SRPage .SREntry {$/;"	c
.SRPage .SRStatus 	doc/html/search/search.css	/^.SRPage .SRStatus {$/;"	c
.SRResult 	doc/html/search/search.css	/^.SRResult {$/;"	c
.SRSymbol 	doc/html/search/search.css	/^.SRSymbol {$/;"	c
.SelectItem 	doc/html/search/search.css	/^.SelectItem {$/;"	c
.arrow 	doc/html/doxygen.css	/^.arrow {$/;"	c
.caption{	font-weight: bold	doc/html/doxygen.css	/^	font-weight: bold;$/;"	c
.contents a.qindexHL:visited 	doc/html/doxygen.css	/^.contents a.qindexHL:visited {$/;"	c
.contents a:visited 	doc/html/doxygen.css	/^.contents a:visited {$/;"	c
.diagraph{        text-align: center	doc/html/doxygen.css	/^        text-align: center;$/;"	c
.directory .levels 	doc/html/doxygen.css	/^.directory .levels {$/;"	c
.directory .levels span 	doc/html/doxygen.css	/^.directory .levels span {$/;"	c
.directory img 	doc/html/doxygen.css	/^.directory img {$/;"	c
.directory table 	doc/html/doxygen.css	/^.directory table {$/;"	c
.directory td 	doc/html/doxygen.css	/^.directory td {$/;"	c
.directory td.desc 	doc/html/doxygen.css	/^.directory td.desc {$/;"	c
.directory td.entry 	doc/html/doxygen.css	/^.directory td.entry {$/;"	c
.directory td.entry a 	doc/html/doxygen.css	/^.directory td.entry a {$/;"	c
.directory td.entry a img 	doc/html/doxygen.css	/^.directory td.entry a img {$/;"	c
.directory tr.even 	doc/html/doxygen.css	/^.directory tr.even {$/;"	c
.dirtab 	doc/html/doxygen.css	/^.dirtab {$/;"	c
.dotgraph{        text-align: center	doc/html/doxygen.css	/^        text-align: center;$/;"	c
.exception	doc/html/doxygen.css	/^.params, .retval, .exception, .tparams {$/;"	c
.fieldtable td	doc/html/doxygen.css	/^.fieldtable td, .fieldtable th {$/;"	c
.fieldtable td.fielddoc 	doc/html/doxygen.css	/^.fieldtable td.fielddoc {$/;"	c
.fieldtable td.fielddoc p:first-child 	doc/html/doxygen.css	/^.fieldtable td.fielddoc p:first-child {$/;"	c
.fieldtable td.fielddoc p:last-child 	doc/html/doxygen.css	/^.fieldtable td.fielddoc p:last-child {$/;"	c
.fieldtable td.fieldname 	doc/html/doxygen.css	/^.fieldtable td.fieldname {$/;"	c
.fieldtable td.fieldname 	doc/html/doxygen.css	/^.fieldtable td.fieldtype, .fieldtable td.fieldname {$/;"	c
.fieldtable td.fieldtype	doc/html/doxygen.css	/^.fieldtable td.fieldtype, .fieldtable td.fieldname {$/;"	c
.fieldtable th 	doc/html/doxygen.css	/^.fieldtable td, .fieldtable th {$/;"	c
.fieldtable th 	doc/html/doxygen.css	/^.fieldtable th {$/;"	c
.fieldtable tr 	doc/html/doxygen.css	/^.memberdecls td, .fieldtable tr {$/;"	c
.fieldtable tr.glow 	doc/html/doxygen.css	/^.memberdecls td.glow, .fieldtable tr.glow {$/;"	c
.fieldtable tr:last-child td 	doc/html/doxygen.css	/^.fieldtable tr:last-child td {$/;"	c
.hl 	doc/html/search/search.css	/^.hl {$/;"	c
.icon 	doc/html/doxygen.css	/^.icon {$/;"	c
.icona 	doc/html/doxygen.css	/^.icona {$/;"	c
.icondoc 	doc/html/doxygen.css	/^.icondoc {$/;"	c
.iconfclosed 	doc/html/doxygen.css	/^.iconfclosed {$/;"	c
.iconfopen 	doc/html/doxygen.css	/^.iconfopen {$/;"	c
.image{        text-align: center	doc/html/doxygen.css	/^        text-align: center;$/;"	c
.inherit 	doc/html/doxygen.css	/^.inherit {$/;"	c
.inherit_header 	doc/html/doxygen.css	/^.inherit_header {$/;"	c
.inherit_header td 	doc/html/doxygen.css	/^.inherit_header td {$/;"	c
.left #MSearchClose 	doc/html/search/search.css	/^.left #MSearchClose {$/;"	c
.left #MSearchSelect 	doc/html/search/search.css	/^.left #MSearchSelect {$/;"	c
.mdescLeft	doc/html/doxygen.css	/^.mdescLeft, .mdescRight {$/;"	c
.mdescLeft	doc/html/doxygen.css	/^.mdescLeft, .mdescRight,$/;"	c
.mdescRight	doc/html/doxygen.css	/^.mdescLeft, .mdescRight,$/;"	c
.mdescRight 	doc/html/doxygen.css	/^.mdescLeft, .mdescRight {$/;"	c
.memItemLeft	doc/html/doxygen.css	/^.memItemLeft, .memItemRight,$/;"	c
.memItemLeft	doc/html/doxygen.css	/^.memItemLeft, .memTemplItemLeft {$/;"	c
.memItemRight	doc/html/doxygen.css	/^.memItemLeft, .memItemRight,$/;"	c
.memItemRight 	doc/html/doxygen.css	/^.memItemRight {$/;"	c
.memSeparator 	doc/html/doxygen.css	/^.memSeparator {$/;"	c
.memTemplItemLeft	doc/html/doxygen.css	/^.memTemplItemLeft, .memTemplItemRight, .memTemplParams {$/;"	c
.memTemplItemLeft 	doc/html/doxygen.css	/^.memItemLeft, .memTemplItemLeft {$/;"	c
.memTemplItemRight	doc/html/doxygen.css	/^.memTemplItemLeft, .memTemplItemRight, .memTemplParams {$/;"	c
.memTemplParams 	doc/html/doxygen.css	/^.memTemplItemLeft, .memTemplItemRight, .memTemplParams {$/;"	c
.memTemplParams 	doc/html/doxygen.css	/^.memTemplParams {$/;"	c
.memberdecls td	doc/html/doxygen.css	/^.memberdecls td, .fieldtable tr {$/;"	c
.memberdecls td.glow	doc/html/doxygen.css	/^.memberdecls td.glow, .fieldtable tr.glow {$/;"	c
.memdoc	doc/html/doxygen.css	/^.memdoc, dl.reflist dd {$/;"	c
.memitem 	doc/html/doxygen.css	/^  .memitem { page-break-inside: avoid; }$/;"	c
.memitem 	doc/html/doxygen.css	/^.memitem {$/;"	c
.memitem.glow 	doc/html/doxygen.css	/^.memitem.glow {$/;"	c
.memname 	doc/html/doxygen.css	/^.memname {$/;"	c
.memname td 	doc/html/doxygen.css	/^.memname td {$/;"	c
.memnav 	doc/html/doxygen.css	/^.memnav {$/;"	c
.mempage 	doc/html/doxygen.css	/^.mempage {$/;"	c
.memproto	doc/html/doxygen.css	/^.memproto, dl.reflist dt {$/;"	c
.memtemplate 	doc/html/doxygen.css	/^.memtemplate {$/;"	c
.mscgraph{        text-align: center	doc/html/doxygen.css	/^        text-align: center;$/;"	c
.navpath li.footer{        list-style-type:none	doc/html/doxygen.css	/^        list-style-type:none;$/;"	c
.navpath li.navelem a:hover{	color:#6884BD	doc/html/doxygen.css	/^	color:#6884BD;$/;"	c
.navpath li.navelem a{	height:32px	doc/html/doxygen.css	/^	height:32px;$/;"	c
.navpath li{	list-style-type:none	doc/html/doxygen.css	/^	list-style-type:none;$/;"	c
.navpath ul{	font-size: 11px	doc/html/doxygen.css	/^	font-size: 11px;$/;"	c
.pages 	doc/html/search/search.css	/^.pages {$/;"	c
.pages b 	doc/html/search/search.css	/^.pages b {$/;"	c
.paramkey 	doc/html/doxygen.css	/^.paramkey {$/;"	c
.paramname 	doc/html/doxygen.css	/^.paramname {$/;"	c
.paramname code 	doc/html/doxygen.css	/^.paramname code {$/;"	c
.paramname em 	doc/html/doxygen.css	/^.paramname em {$/;"	c
.params	doc/html/doxygen.css	/^.params, .retval, .exception, .tparams {$/;"	c
.params .paramdir 	doc/html/doxygen.css	/^.params .paramdir {$/;"	c
.params .paramname	doc/html/doxygen.css	/^.params .paramname, .retval .paramname {$/;"	c
.params .paramtype 	doc/html/doxygen.css	/^.params .paramtype {$/;"	c
.paramtype 	doc/html/doxygen.css	/^.paramtype {$/;"	c
.retval	doc/html/doxygen.css	/^.params, .retval, .exception, .tparams {$/;"	c
.retval .paramname 	doc/html/doxygen.css	/^.params .paramname, .retval .paramname {$/;"	c
.right #MSearchClose 	doc/html/search/search.css	/^.right #MSearchClose {$/;"	c
.right #MSearchSelect 	doc/html/search/search.css	/^.right #MSearchSelect {$/;"	c
.searchpages 	doc/html/search/search.css	/^.searchpages {$/;"	c
.searchresult 	doc/html/search/search.css	/^.searchresult {$/;"	c
.summary 	doc/html/doxygen.css	/^  .summary { display: none; }$/;"	c
.tablist 	doc/html/tabs.css	/^.tablist {$/;"	c
.tablist a 	doc/html/tabs.css	/^.tablist a {$/;"	c
.tablist a:hover 	doc/html/tabs.css	/^.tablist a:hover {$/;"	c
.tablist li 	doc/html/tabs.css	/^.tablist li {$/;"	c
.tablist li.current a 	doc/html/tabs.css	/^.tablist li.current a {$/;"	c
.tabs	doc/html/tabs.css	/^.tabs, .tabs2, .tabs3 {$/;"	c
.tabs2	doc/html/tabs.css	/^.tabs, .tabs2, .tabs3 {$/;"	c
.tabs2 	doc/html/tabs.css	/^.tabs2 {$/;"	c
.tabs3 	doc/html/tabs.css	/^.tabs, .tabs2, .tabs3 {$/;"	c
.tabs3 	doc/html/tabs.css	/^.tabs3 {$/;"	c
.tabs3 .tablist a 	doc/html/tabs.css	/^.tabs3 .tablist a {$/;"	c
.tabsearch 	doc/html/doxygen.css	/^.tabsearch {$/;"	c
.title 	doc/html/doxygen.css	/^.title {$/;"	c
.tparams 	doc/html/doxygen.css	/^.params, .retval, .exception, .tparams {$/;"	c
.ttc 	doc/html/doxygen.css	/^.ttc {$/;"	c
0	doc/html/search/searchdata.js	/^{$/;"	p	class:indexSectionLabels
0	doc/html/search/searchdata.js	/^{$/;"	p	class:indexSectionNames
0	doc/html/search/searchdata.js	/^{$/;"	p	class:indexSectionsWithContent
0.9	doc/html/doxygen.css	/^	text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.9);$/;"	s
1	doc/html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
1	doc/html/search/searchdata.js	/^  0: "abcdefgijklmnopqrstuvw",$/;"	p	class:indexSectionsWithContent
1	doc/html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
2	doc/html/search/searchdata.js	/^  1: "Classes",$/;"	p	class:indexSectionLabels
2	doc/html/search/searchdata.js	/^  1: "cegkmqrs",$/;"	p	class:indexSectionsWithContent
2	doc/html/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
255	doc/html/doxygen.css	/^	text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.9);$/;"	s
3	doc/html/search/searchdata.js	/^  2: "Files",$/;"	p	class:indexSectionLabels
3	doc/html/search/searchdata.js	/^  2: "cdempq",$/;"	p	class:indexSectionsWithContent
3	doc/html/search/searchdata.js	/^  2: "files",$/;"	p	class:indexSectionNames
4	doc/html/search/searchdata.js	/^  3: "Functions",$/;"	p	class:indexSectionLabels
4	doc/html/search/searchdata.js	/^  3: "acdegilmnpruw",$/;"	p	class:indexSectionsWithContent
4	doc/html/search/searchdata.js	/^  3: "functions",$/;"	p	class:indexSectionNames
5	doc/html/search/searchdata.js	/^  4: "Variables",$/;"	p	class:indexSectionLabels
5	doc/html/search/searchdata.js	/^  4: "abcdefgijknoprstv",$/;"	p	class:indexSectionsWithContent
5	doc/html/search/searchdata.js	/^  4: "variables",$/;"	p	class:indexSectionNames
6	doc/html/search/searchdata.js	/^  5: "Typedefs",$/;"	p	class:indexSectionLabels
6	doc/html/search/searchdata.js	/^  5: "cegjkpqrst",$/;"	p	class:indexSectionsWithContent
6	doc/html/search/searchdata.js	/^  5: "typedefs",$/;"	p	class:indexSectionNames
7	doc/html/search/searchdata.js	/^  6: "Enumerations",$/;"	p	class:indexSectionLabels
7	doc/html/search/searchdata.js	/^  6: "c",$/;"	p	class:indexSectionsWithContent
7	doc/html/search/searchdata.js	/^  6: "enums",$/;"	p	class:indexSectionNames
Activate	doc/html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
An implementation of a double ended queue	doc/latex/group__DEQUE.tex	/^\\hypertarget{group__DEQUE}{}\\section{An implementation of a double ended queue}$/;"	s
Arial	doc/html/doxygen.css	/^	font: 120% Tahoma, Arial,sans-serif;$/;"	s
Arial	doc/html/doxygen.css	/^	font: 300% Tahoma, Arial,sans-serif;$/;"	s
Arial	doc/html/doxygen.css	/^	font: 50% Tahoma, Arial,sans-serif;$/;"	s
BACKGROUND	src/command.h	53;"	d
BCKGRND	src/parsing/parse.tab.c	/^    BCKGRND = 259,$/;"	e	enum:yytokentype	file:
BCKGRND	src/parsing/parse.tab.h	/^    BCKGRND = 259,$/;"	e	enum:yytokentype
BEGIN	src/parsing/lex.yy.c	126;"	d	file:
C D Command Struct Reference	doc/latex/structCDCommand.tex	/^\\hypertarget{structCDCommand}{}\\section{C\\+D\\+Command Struct Reference}$/;"	s
CC	Makefile	/^CC = gcc --std=gnu11$/;"	m
CD	src/command.h	/^  CD,$/;"	e	enum:CommandType
CDCommand	src/command.h	/^typedef struct CDCommand {$/;"	s
CDCommand	src/command.h	/^} CDCommand;$/;"	t	typeref:struct:CDCommand
CD_TOK	src/parsing/parse.tab.c	/^    CD_TOK = 268,$/;"	e	enum:yytokentype	file:
CD_TOK	src/parsing/parse.tab.h	/^    CD_TOK = 268,$/;"	e	enum:yytokentype
CFILELIST	Makefile	/^CFILELIST = quash.c command.c execute.c parsing\/memory_pool.c parsing\/parsing_interface.c parsing\/parse.tab.c parsing\/lex.yy.c$/;"	m
CFILES	Makefile	/^CFILES = $(patsubst %,$(SRCDIR)%,$(CFILELIST))$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -g$/;"	m
Class Documentation	doc/latex/refman.tex	/^\\input{files}$/;"	c
Class Index	doc/latex/refman.tex	/^\\label{index}\\hypertarget{index}{}\\input{index}$/;"	c
Class List	doc/latex/annotated.tex	/^\\section{Class List}$/;"	s
Classes	doc/latex/command_8h.tex	/^{\\ttfamily \\#include $<$stdbool.\\+h$>$}\\\\*$/;"	b
Classes	doc/latex/deque_8h.tex	/^{\\ttfamily \\#include $<$stdlib.\\+h$>$}\\\\*$/;"	b
Classes	doc/latex/group__DEQUE.tex	/^\\label{group__DEQUE}\\index{An implementation of a double ended queue@{An implementation of a double ended queue}}$/;"	b
CloseResultsWindow	doc/html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	doc/html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
Command	src/command.h	/^typedef union Command {$/;"	u
Command	src/command.h	/^} Command;$/;"	t	typeref:union:Command
Command Holder Struct Reference	doc/latex/structCommandHolder.tex	/^\\hypertarget{structCommandHolder}{}\\section{Command\\+Holder Struct Reference}$/;"	s
Command Union Reference	doc/latex/unionCommand.tex	/^\\hypertarget{unionCommand}{}\\section{Command Union Reference}$/;"	s
CommandHolder	src/command.h	/^typedef struct CommandHolder {$/;"	s
CommandHolder	src/command.h	/^} CommandHolder;$/;"	t	typeref:struct:CommandHolder
CommandType	src/command.h	/^typedef enum CommandType {$/;"	g
CommandType	src/command.h	/^} CommandType;$/;"	t	typeref:enum:CommandType
DIV.searchresults 	doc/html/search/search.css	/^DIV.searchresults {$/;"	s
DOMPopupSearchResults	doc/html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	doc/html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	doc/html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	doc/html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	doc/html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	doc/html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	doc/html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
DOXYGENCONF	Makefile	/^DOXYGENCONF = quash.doxygen$/;"	m
Detailed Description	doc/latex/command_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Print all commands in the script with {\\itshape print\\+\\_\\+command()} \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/debug_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Insert code that is only compiled if D\\+E\\+B\\+UG is defined. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structCDCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structCommandHolder.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structExample.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structExportCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structGenericCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structKillCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structMemoryPool.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structQuashState.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structRedirect.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/structSimpleCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Detailed Description	doc/latex/unionCommand.tex	/^\\end{DoxyCompactItemize}$/;"	b
Directories	doc/latex/dir_68267d1309a1af8e8297ef4c3efbcdba.tex	/^\\label{dir_68267d1309a1af8e8297ef4c3efbcdba}\\index{src Directory Reference@{src Directory Reference}}$/;"	b
E E CS 678 Project 1 Quash Shell	doc/latex/index.tex	/^\\begin{quote}$/;"	s
ECHO	src/command.h	/^  ECHO,$/;"	e	enum:CommandType
ECHO	src/parsing/lex.yy.c	655;"	d	file:
ECHO_TOK	src/parsing/parse.tab.c	/^    ECHO_TOK = 266,$/;"	e	enum:yytokentype	file:
ECHO_TOK	src/parsing/parse.tab.h	/^    ECHO_TOK = 266,$/;"	e	enum:yytokentype
END	src/parsing/parse.tab.c	/^    END = 265,$/;"	e	enum:yytokentype	file:
END	src/parsing/parse.tab.h	/^    END = 265,$/;"	e	enum:yytokentype
EOB_ACT_CONTINUE_SCAN	src/parsing/lex.yy.c	174;"	d	file:
EOB_ACT_END_OF_FILE	src/parsing/lex.yy.c	175;"	d	file:
EOB_ACT_LAST_MATCH	src/parsing/lex.yy.c	176;"	d	file:
EOC	src/command.h	/^  EOC = 0, \/\/ pseudo-command for marking the end of a script$/;"	e	enum:CommandType
EOCCommand	src/command.h	/^typedef SimpleCommand EOCCommand;$/;"	t
EOC_TOK	src/parsing/parse.tab.c	/^    EOC_TOK = 272,$/;"	e	enum:yytokentype	file:
EOC_TOK	src/parsing/parse.tab.h	/^    EOC_TOK = 272,$/;"	e	enum:yytokentype
EQUALS	src/parsing/parse.tab.c	/^    EQUALS = 261,$/;"	e	enum:yytokentype	file:
EQUALS	src/parsing/parse.tab.h	/^    EQUALS = 261,$/;"	e	enum:yytokentype
EXECNAME	Makefile	/^EXECNAME = $(patsubst %,.\/%,$(PROGNAME))$/;"	m
EXIT	src/command.h	/^  EXIT$/;"	e	enum:CommandType
EXIT_SUCCESS	src/parsing/parse.tab.c	320;"	d	file:
EXIT_SUCCESS	src/parsing/parse.tab.c	348;"	d	file:
EXIT_TOK	src/parsing/parse.tab.c	/^    EXIT_TOK = 277$/;"	e	enum:yytokentype	file:
EXIT_TOK	src/parsing/parse.tab.h	/^    EXIT_TOK = 277$/;"	e	enum:yytokentype
EXPORT	src/command.h	/^  EXPORT,$/;"	e	enum:CommandType
EXPORT_TOK	src/parsing/parse.tab.c	/^    EXPORT_TOK = 267,$/;"	e	enum:yytokentype	file:
EXPORT_TOK	src/parsing/parse.tab.h	/^    EXPORT_TOK = 267,$/;"	e	enum:yytokentype
EchoCommand	src/command.h	/^typedef GenericCommand EchoCommand;$/;"	t
Enumeration Type Documentation	doc/latex/command_8h.tex	/^\\end{DoxySeeAlso}$/;"	b
Enumerations	doc/latex/command_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Contains information about the properties of the command. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Example	src/deque.h	/^typedef struct Example {$/;"	s
Example	src/deque.h	/^} Example; \/**< @brief This way you do not have to type "struct Example" each$/;"	t	typeref:struct:Example
Example Struct Reference	doc/latex/structExample.tex	/^\\hypertarget{structExample}{}\\section{Example Struct Reference}$/;"	s
ExitCommand	src/command.h	/^typedef SimpleCommand ExitCommand;$/;"	t
Export Command Struct Reference	doc/latex/structExportCommand.tex	/^\\hypertarget{structExportCommand}{}\\section{Export\\+Command Struct Reference}$/;"	s
ExportCommand	src/command.h	/^typedef struct ExportCommand {$/;"	s
ExportCommand	src/command.h	/^} ExportCommand;$/;"	t	typeref:struct:ExportCommand
FLEXINT_H	src/parsing/lex.yy.c	30;"	d	file:
FLEX_BETA	src/parsing/lex.yy.c	14;"	d	file:
FLEX_SCANNER	src/parsing/lex.yy.c	9;"	d	file:
Features	doc/latex/index.tex	/^{\\ttfamily make test} \\end{quote}$/;"	b
File Documentation	doc/latex/refman.tex	/^\\input{structSimpleCommand}$/;"	c
File Index	doc/latex/refman.tex	/^\\input{annotated}$/;"	c
File List	doc/latex/files.tex	/^\\section{File List}$/;"	s
Files	doc/latex/dir_3fb67633942bd84f7aa391e58ba835b3.tex	/^\\label{dir_3fb67633942bd84f7aa391e58ba835b3}\\index{src\/parsing Directory Reference@{src\/parsing Directory Reference}}$/;"	b
Files	doc/latex/dir_68267d1309a1af8e8297ef4c3efbcdba.tex	/^\\end{DoxyCompactItemize}$/;"	b
FindChildElement	doc/html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
Function Documentation	doc/latex/command_8h.tex	/^\\end{DoxySeeAlso}$/;"	b
Functions	doc/latex/command_8h.tex	/^\\end{DoxyCompactItemize}$/;"	b
GENERIC	src/command.h	/^  GENERIC,$/;"	e	enum:CommandType
Generic Command Struct Reference	doc/latex/structGenericCommand.tex	/^\\hypertarget{structGenericCommand}{}\\section{Generic\\+Command Struct Reference}$/;"	s
GenericCommand	src/command.h	/^typedef struct GenericCommand {$/;"	s
GenericCommand	src/command.h	/^} GenericCommand;$/;"	t	typeref:struct:GenericCommand
Geneva	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
HFILELIST	Makefile	/^HFILELIST = quash.h command.h execute.h parsing\/memory_pool.h parsing\/parsing_interface.h parsing\/parse.tab.h deque.h debug.h$/;"	m
HFILES	Makefile	/^HFILES = $(patsubst %,$(SRCDIR)%,$(HFILELIST))$/;"	m
ID	src/parsing/parse.tab.c	/^    ID = 275,$/;"	e	enum:yytokentype	file:
ID	src/parsing/parse.tab.h	/^    ID = 275,$/;"	e	enum:yytokentype
IFDEBUG	src/debug.h	31;"	d
IFDEBUG	src/debug.h	36;"	d
IMPLEMENT_DEQUE	src/deque.h	91;"	d
IMPLEMENT_DEQUE_MEMORY_POOL	src/parsing/memory_pool.h	74;"	d
IMPLEMENT_DEQUE_STRUCT	src/deque.h	33;"	d
IMPLEMENT_ME	src/execute.c	20;"	d	file:
INCDIRS	Makefile	/^INCDIRS = $(patsubst %,-I%,$(INCLIST))$/;"	m
INCLIST	Makefile	/^INCLIST = .\/src .\/src\/parsing$/;"	m
INITIAL	src/parsing/lex.yy.c	561;"	d	file:
INT16_MAX	src/parsing/lex.yy.c	72;"	d	file:
INT16_MIN	src/parsing/lex.yy.c	63;"	d	file:
INT32_MAX	src/parsing/lex.yy.c	75;"	d	file:
INT32_MIN	src/parsing/lex.yy.c	66;"	d	file:
INT8_MAX	src/parsing/lex.yy.c	69;"	d	file:
INT8_MIN	src/parsing/lex.yy.c	60;"	d	file:
Installation	doc/latex/index.tex	/^A skeleton has been provided, but it lacks most of the core functionality one would expect from a shell program. Quash should behave similar to csh, bash or other popular shell programs.$/;"	b
Introduction	doc/latex/index.tex	/^\\end{quote}$/;"	b
JOBS	src/command.h	/^  JOBS,$/;"	e	enum:CommandType
JOBS_TOK	src/parsing/parse.tab.c	/^    JOBS_TOK = 270,$/;"	e	enum:yytokentype	file:
JOBS_TOK	src/parsing/parse.tab.h	/^    JOBS_TOK = 270,$/;"	e	enum:yytokentype
JobsCommand	src/command.h	/^typedef SimpleCommand JobsCommand;$/;"	t
KILL	src/command.h	/^  KILL,$/;"	e	enum:CommandType
KILL_TOK	src/parsing/parse.tab.c	/^    KILL_TOK = 271,$/;"	e	enum:yytokentype	file:
KILL_TOK	src/parsing/parse.tab.h	/^    KILL_TOK = 271,$/;"	e	enum:yytokentype
Kill Command Struct Reference	doc/latex/structKillCommand.tex	/^\\hypertarget{structKillCommand}{}\\section{Kill\\+Command Struct Reference}$/;"	s
KillCommand	src/command.h	/^typedef struct KillCommand {$/;"	s
KillCommand	src/command.h	/^} KillCommand;$/;"	t	typeref:struct:KillCommand
LIBLIST	Makefile	/^LIBLIST =$/;"	m
Lucida Grande	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
Macro Definition Documentation	doc/latex/debug_8h.tex	/^This file holds useful macros for debugging purposes. $/;"	b
Macros	doc/latex/command_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Contains information about the properties of the command. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Macros	doc/latex/debug_8h.tex	/^{\\ttfamily \\#include $<$stdio.\\+h$>$}\\\\*$/;"	b
Macros	doc/latex/deque_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em A data structure generated by \\hyperlink{deque_8h_ad1734634a88d702478c08e26e39dc7b8}{I\\+M\\+P\\+L\\+E\\+M\\+E\\+N\\+T\\+\\_\\+\\+D\\+E\\+Q\\+U\\+E\\+\\_\\+\\+S\\+T\\+R\\+U\\+C\\+T()} to store the state of a deque. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Main Page	doc/latex/refman.tex	/^\\hypersetup{pageanchor=true}$/;"	c
Member Data Documentation	doc/latex/structCDCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structCommandHolder.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structExample.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structExportCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structGenericCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structKillCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/structMemoryPool.tex	/^\\end{DoxyNote}$/;"	b
Member Data Documentation	doc/latex/structQuashState.tex	/^Holds information about the state and environment Quash is running in. $/;"	b
Member Data Documentation	doc/latex/structRedirect.tex	/^Intermediate parsing structure used to determine the final configuration of the redirects in a command. $/;"	b
Member Data Documentation	doc/latex/structSimpleCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Member Data Documentation	doc/latex/unionCommand.tex	/^\\end{DoxySeeAlso}$/;"	b
Memory Pool Struct Reference	doc/latex/structMemoryPool.tex	/^\\hypertarget{structMemoryPool}{}\\section{Memory\\+Pool Struct Reference}$/;"	s
MemoryPool	src/parsing/memory_pool.c	/^typedef struct MemoryPool {$/;"	s	file:
MemoryPool	src/parsing/memory_pool.c	/^} MemoryPool;$/;"	t	typeref:struct:MemoryPool	file:
Modules	doc/latex/modules.tex	/^\\section{Modules}$/;"	s
NUM	src/parsing/parse.tab.c	/^    NUM = 276,$/;"	e	enum:yytokentype	file:
NUM	src/parsing/parse.tab.h	/^    NUM = 276,$/;"	e	enum:yytokentype
Nav	doc/html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	doc/html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	doc/html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	doc/html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
OBJDIR	Makefile	/^OBJDIR = .\/obj\/$/;"	m
OBJINNERDIRS	Makefile	/^OBJINNERDIRS = $(patsubst $(SRCDIR)%,$(OBJDIR)%,$(shell find $(SRCDIR) -type d))$/;"	m
OFILES	Makefile	/^OFILES = $(patsubst %.c,$(OBJDIR)%.o,$(CFILELIST))$/;"	m
OnSearchFieldChange	doc/html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	doc/html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	doc/html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	doc/html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	doc/html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	doc/html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
PIPE	src/parsing/parse.tab.c	/^    PIPE = 258,$/;"	e	enum:yytokentype	file:
PIPE	src/parsing/parse.tab.h	/^    PIPE = 258,$/;"	e	enum:yytokentype
PIPE_IN	src/command.h	51;"	d
PIPE_OUT	src/command.h	52;"	d
PRINT_DEBUG	src/debug.h	28;"	d
PRINT_DEBUG	src/debug.h	34;"	d
PROGNAME	Makefile	/^PROGNAME = quash$/;"	m
PROTOTYPE_DEQUE	src/deque.h	60;"	d
PWD	src/command.h	/^  PWD,$/;"	e	enum:CommandType
PWDCommand	src/command.h	/^typedef SimpleCommand PWDCommand;$/;"	t
PWD_TOK	src/parsing/parse.tab.c	/^    PWD_TOK = 269,$/;"	e	enum:yytokentype	file:
PWD_TOK	src/parsing/parse.tab.h	/^    PWD_TOK = 269,$/;"	e	enum:yytokentype
ProcessKeys	doc/html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
Public Attributes	doc/latex/structCDCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structCommandHolder.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structExample.tex	/^{\\ttfamily \\#include $<$deque.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structExportCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structGenericCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structKillCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structMemoryPool.tex	/^Holds a block of memory that can be used for allocations.  $/;"	b
Public Attributes	doc/latex/structQuashState.tex	/^{\\ttfamily \\#include $<$quash.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structRedirect.tex	/^{\\ttfamily \\#include $<$parsing\\+\\_\\+interface.\\+h$>$}$/;"	b
Public Attributes	doc/latex/structSimpleCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Public Attributes	doc/latex/unionCommand.tex	/^{\\ttfamily \\#include $<$command.\\+h$>$}$/;"	b
Quash State Struct Reference	doc/latex/structQuashState.tex	/^\\hypertarget{structQuashState}{}\\section{Quash\\+State Struct Reference}$/;"	s
QuashState	src/quash.h	/^typedef struct QuashState {$/;"	s
QuashState	src/quash.h	/^} QuashState;$/;"	t	typeref:struct:QuashState
RAWC	Makefile	/^RAWC = $(patsubst %.c,%,$(addprefix $(SRCDIR), $(CFILELIST)))$/;"	m
RAWH	Makefile	/^RAWH = $(patsubst %.h,%,$(addprefix $(SRCDIR), $(HFILELIST)))$/;"	m
REDIRECT_APPEND	src/command.h	50;"	d
REDIRECT_IN	src/command.h	48;"	d
REDIRECT_OUT	src/command.h	49;"	d
REDIRIN	src/parsing/parse.tab.c	/^    REDIRIN = 262,$/;"	e	enum:yytokentype	file:
REDIRIN	src/parsing/parse.tab.h	/^    REDIRIN = 262,$/;"	e	enum:yytokentype
REDIROUT	src/parsing/parse.tab.c	/^    REDIROUT = 263,$/;"	e	enum:yytokentype	file:
REDIROUT	src/parsing/parse.tab.h	/^    REDIROUT = 263,$/;"	e	enum:yytokentype
REDIROUTAPP	src/parsing/parse.tab.c	/^    REDIROUTAPP = 264,$/;"	e	enum:yytokentype	file:
REDIROUTAPP	src/parsing/parse.tab.h	/^    REDIROUTAPP = 264,$/;"	e	enum:yytokentype
REJECT	src/parsing/lex.yy.c	541;"	d	file:
Redirect	src/parsing/parsing_interface.h	/^typedef struct Redirect {$/;"	s
Redirect	src/parsing/parsing_interface.h	/^} Redirect;$/;"	t	typeref:struct:Redirect
Redirect Struct Reference	doc/latex/structRedirect.tex	/^\\hypertarget{structRedirect}{}\\section{Redirect Struct Reference}$/;"	s
SIM_STR	src/parsing/parse.tab.c	/^    SIM_STR = 274,$/;"	e	enum:yytokentype	file:
SIM_STR	src/parsing/parse.tab.h	/^    SIM_STR = 274,$/;"	e	enum:yytokentype
SQUOTE	src/parsing/parse.tab.c	/^    SQUOTE = 260,$/;"	e	enum:yytokentype	file:
SQUOTE	src/parsing/parse.tab.h	/^    SQUOTE = 260,$/;"	e	enum:yytokentype
SRCDIR	Makefile	/^SRCDIR = .\/src\/$/;"	m
SRC_COMMAND_H	src/command.h	8;"	d
SRC_DEQUE_H	src/deque.h	8;"	d
SRC_EXECUTE_H	src/execute.h	8;"	d
SRC_PARSING_MEMORY_POOL_H	src/parsing/memory_pool.h	21;"	d
SRC_PARSING_PARSING_INTERFACE_H	src/parsing/parsing_interface.h	9;"	d
SRC_QUASH_H	src/quash.h	8;"	d
STR	src/parsing/parse.tab.c	/^    STR = 273,$/;"	e	enum:yytokentype	file:
STR	src/parsing/parse.tab.h	/^    STR = 273,$/;"	e	enum:yytokentype
STUDENTID	Makefile	/^STUDENTID = XXXXXXX$/;"	m
SUBMISSIONDIRS	Makefile	/^SUBMISSIONDIRS = $(addprefix $(STUDENTID)-project1-quash\/,$(shell find $(SRCDIR) -type d))$/;"	m
Search	doc/html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	doc/html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	doc/html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	doc/html/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	doc/html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	doc/html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
Simple Command Struct Reference	doc/latex/structSimpleCommand.tex	/^\\hypertarget{structSimpleCommand}{}\\section{Simple\\+Command Struct Reference}$/;"	s
SimpleCommand	src/command.h	/^typedef struct SimpleCommand {$/;"	s
SimpleCommand	src/command.h	/^} SimpleCommand;$/;"	t	typeref:struct:SimpleCommand
Tahoma	doc/html/doxygen.css	/^	font: 120% Tahoma, Arial,sans-serif;$/;"	s
Tahoma	doc/html/doxygen.css	/^	font: 300% Tahoma, Arial,sans-serif;$/;"	s
Tahoma	doc/html/doxygen.css	/^	font: 50% Tahoma, Arial,sans-serif;$/;"	s
Toggle	doc/html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
Type	src/deque.h	/^typedef char Type;$/;"	t
Typedef Documentation	doc/latex/command_8h.tex	/^\\hyperlink{unionCommand}{Command} structures and functions for defining and managing commands. $/;"	b
Typedefs	doc/latex/command_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Flag bit indicating whether a {\\itshape \\hyperlink{structGenericCommand}{Generic\\+Command}} should be run in the background. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Typedefs	doc/latex/deque_8h.tex	/^\\begin{DoxyCompactList}\\small\\item\\em Generates a {\\itshape malloc} based set of functions for use with a structure generated by {\\itshape \\hyperlink{deque_8h_ad1734634a88d702478c08e26e39dc7b8}{I\\+M\\+P\\+L\\+E\\+M\\+E\\+N\\+T\\+\\_\\+\\+D\\+E\\+Q\\+U\\+E\\+\\_\\+\\+S\\+T\\+R\\+U\\+C\\+T()}} \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
Typedefs	doc/latex/group__DEQUE.tex	/^\\begin{DoxyCompactList}\\small\\item\\em A data structure generated by \\hyperlink{deque_8h_ad1734634a88d702478c08e26e39dc7b8}{I\\+M\\+P\\+L\\+E\\+M\\+E\\+N\\+T\\+\\_\\+\\+D\\+E\\+Q\\+U\\+E\\+\\_\\+\\+S\\+T\\+R\\+U\\+C\\+T()} to store the state of a deque. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	b
UINT16_MAX	src/parsing/lex.yy.c	81;"	d	file:
UINT32_MAX	src/parsing/lex.yy.c	84;"	d	file:
UINT8_MAX	src/parsing/lex.yy.c	78;"	d	file:
Usage	doc/latex/index.tex	/^{\\ttfamily make clean} \\end{quote}$/;"	b
YYABORT	src/parsing/parse.tab.c	631;"	d	file:
YYACCEPT	src/parsing/parse.tab.c	630;"	d	file:
YYBACKUP	src/parsing/parse.tab.c	637;"	d	file:
YYBISON	src/parsing/parse.tab.c	44;"	d	file:
YYBISON_VERSION	src/parsing/parse.tab.c	47;"	d	file:
YYCASE_	src/parsing/parse.tab.c	979;"	d	file:
YYCASE_	src/parsing/parse.tab.c	989;"	d	file:
YYCOPY	src/parsing/parse.tab.c	412;"	d	file:
YYCOPY	src/parsing/parse.tab.c	415;"	d	file:
YYCOPY_NEEDED	src/parsing/parse.tab.c	387;"	d	file:
YYDEBUG	src/parsing/parse.tab.c	110;"	d	file:
YYDEBUG	src/parsing/parse.tab.h	37;"	d
YYDPRINTF	src/parsing/parse.tab.c	668;"	d	file:
YYDPRINTF	src/parsing/parse.tab.c	784;"	d	file:
YYEMPTY	src/parsing/parse.tab.c	627;"	d	file:
YYEOF	src/parsing/parse.tab.c	628;"	d	file:
YYERRCODE	src/parsing/parse.tab.c	656;"	d	file:
YYERROR	src/parsing/parse.tab.c	632;"	d	file:
YYERROR_VERBOSE	src/parsing/parse.tab.c	101;"	d	file:
YYERROR_VERBOSE	src/parsing/parse.tab.c	98;"	d	file:
YYERROR_VERBOSE	src/parsing/parse.tab.c	99;"	d	file:
YYFINAL	src/parsing/parse.tab.c	428;"	d	file:
YYFPRINTF	src/parsing/parse.tab.c	665;"	d	file:
YYFREE	src/parsing/parse.tab.c	358;"	d	file:
YYINITDEPTH	src/parsing/parse.tab.c	793;"	d	file:
YYLAST	src/parsing/parse.tab.c	430;"	d	file:
YYMALLOC	src/parsing/parse.tab.c	352;"	d	file:
YYMAXDEPTH	src/parsing/parse.tab.c	804;"	d	file:
YYMAXUTOK	src/parsing/parse.tab.c	444;"	d	file:
YYNNTS	src/parsing/parse.tab.c	435;"	d	file:
YYNRULES	src/parsing/parse.tab.c	437;"	d	file:
YYNSTATES	src/parsing/parse.tab.c	439;"	d	file:
YYNTOKENS	src/parsing/parse.tab.c	433;"	d	file:
YYPACT_NINF	src/parsing/parse.tab.c	520;"	d	file:
YYPOPSTACK	src/parsing/parse.tab.c	1105;"	d	file:
YYPULL	src/parsing/parse.tab.c	59;"	d	file:
YYPURE	src/parsing/parse.tab.c	53;"	d	file:
YYPUSH	src/parsing/parse.tab.c	56;"	d	file:
YYRECOVERING	src/parsing/parse.tab.c	635;"	d	file:
YYSIZE_MAXIMUM	src/parsing/parse.tab.c	231;"	d	file:
YYSIZE_T	src/parsing/parse.tab.c	220;"	d	file:
YYSIZE_T	src/parsing/parse.tab.c	222;"	d	file:
YYSIZE_T	src/parsing/parse.tab.c	225;"	d	file:
YYSIZE_T	src/parsing/parse.tab.c	227;"	d	file:
YYSKELETON_NAME	src/parsing/parse.tab.c	50;"	d	file:
YYSTACK_ALLOC	src/parsing/parse.tab.c	306;"	d	file:
YYSTACK_ALLOC	src/parsing/parse.tab.c	310;"	d	file:
YYSTACK_ALLOC	src/parsing/parse.tab.c	315;"	d	file:
YYSTACK_ALLOC	src/parsing/parse.tab.c	338;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/parsing/parse.tab.c	335;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/parsing/parse.tab.c	341;"	d	file:
YYSTACK_BYTES	src/parsing/parse.tab.c	383;"	d	file:
YYSTACK_FREE	src/parsing/parse.tab.c	329;"	d	file:
YYSTACK_FREE	src/parsing/parse.tab.c	339;"	d	file:
YYSTACK_GAP_MAXIMUM	src/parsing/parse.tab.c	379;"	d	file:
YYSTACK_RELOCATE	src/parsing/parse.tab.c	394;"	d	file:
YYSTATE	src/parsing/lex.yy.c	133;"	d	file:
YYSTYPE	src/parsing/parse.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	src/parsing/parse.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	src/parsing/parse.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	src/parsing/parse.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	src/parsing/parse.tab.c	176;"	d	file:
YYSTYPE_IS_DECLARED	src/parsing/parse.tab.h	103;"	d
YYSTYPE_IS_TRIVIAL	src/parsing/parse.tab.c	175;"	d	file:
YYSTYPE_IS_TRIVIAL	src/parsing/parse.tab.h	102;"	d
YYTABLES_NAME	src/parsing/lex.yy.c	1929;"	d	file:
YYTABLE_NINF	src/parsing/parse.tab.c	525;"	d	file:
YYTERROR	src/parsing/parse.tab.c	655;"	d	file:
YYTOKENTYPE	src/parsing/parse.tab.c	129;"	d	file:
YYTOKENTYPE	src/parsing/parse.tab.h	56;"	d
YYTRANSLATE	src/parsing/parse.tab.c	446;"	d	file:
YYUNDEFTOK	src/parsing/parse.tab.c	443;"	d	file:
YYUSE	src/parsing/parse.tab.c	274;"	d	file:
YYUSE	src/parsing/parse.tab.c	276;"	d	file:
YY_	src/parsing/parse.tab.c	237;"	d	file:
YY_	src/parsing/parse.tab.c	241;"	d	file:
YY_ATTRIBUTE	src/parsing/parse.tab.c	249;"	d	file:
YY_ATTRIBUTE	src/parsing/parse.tab.c	251;"	d	file:
YY_ATTRIBUTE_PURE	src/parsing/parse.tab.c	256;"	d	file:
YY_ATTRIBUTE_UNUSED	src/parsing/parse.tab.c	260;"	d	file:
YY_AT_BOL	src/parsing/lex.yy.c	360;"	d	file:
YY_BREAK	src/parsing/lex.yy.c	734;"	d	file:
YY_BUFFER_EOF_PENDING	src/parsing/lex.yy.c	276;"	d	file:
YY_BUFFER_NEW	src/parsing/lex.yy.c	264;"	d	file:
YY_BUFFER_NORMAL	src/parsing/lex.yy.c	265;"	d	file:
YY_BUFFER_STATE	src/parsing/lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	src/parsing/lex.yy.c	150;"	d	file:
YY_BUF_SIZE	src/parsing/lex.yy.c	152;"	d	file:
YY_CHAR	src/parsing/lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	src/parsing/lex.yy.c	292;"	d	file:
YY_CURRENT_BUFFER_LVALUE	src/parsing/lex.yy.c	299;"	d	file:
YY_DECL	src/parsing/lex.yy.c	722;"	d	file:
YY_DECL_IS_OURS	src/parsing/lex.yy.c	718;"	d	file:
YY_DO_BEFORE_ACTION	src/parsing/lex.yy.c	394;"	d	file:
YY_END_OF_BUFFER	src/parsing/lex.yy.c	402;"	d	file:
YY_END_OF_BUFFER_CHAR	src/parsing/lex.yy.c	141;"	d	file:
YY_EXIT_FAILURE	src/parsing/lex.yy.c	1722;"	d	file:
YY_EXTRA_TYPE	src/parsing/lex.yy.c	572;"	d	file:
YY_FATAL_ERROR	src/parsing/lex.yy.c	709;"	d	file:
YY_FLEX_MAJOR_VERSION	src/parsing/lex.yy.c	10;"	d	file:
YY_FLEX_MINOR_VERSION	src/parsing/lex.yy.c	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	src/parsing/lex.yy.c	12;"	d	file:
YY_FLUSH_BUFFER	src/parsing/lex.yy.c	328;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	src/parsing/parse.tab.c	281;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	src/parsing/parse.tab.c	291;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	src/parsing/parse.tab.c	285;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	src/parsing/parse.tab.c	292;"	d	file:
YY_INITIAL_VALUE	src/parsing/parse.tab.c	288;"	d	file:
YY_INITIAL_VALUE	src/parsing/parse.tab.c	295;"	d	file:
YY_INPUT	src/parsing/lex.yy.c	662;"	d	file:
YY_INT_ALIGNED	src/parsing/lex.yy.c	5;"	d	file:
YY_LESS_LINENO	src/parsing/lex.yy.c	185;"	d	file:
YY_LINENO_REWIND_TO	src/parsing/lex.yy.c	192;"	d	file:
YY_LOCATION_PRINT	src/parsing/parse.tab.c	676;"	d	file:
YY_MORE_ADJ	src/parsing/lex.yy.c	543;"	d	file:
YY_NEW_FILE	src/parsing/lex.yy.c	139;"	d	file:
YY_NO_INPUT	src/parsing/lex.yy.c	556;"	d	file:
YY_NULL	src/parsing/lex.yy.c	113;"	d	file:
YY_NULLPTR	src/parsing/parse.tab.c	90;"	d	file:
YY_NULLPTR	src/parsing/parse.tab.c	92;"	d	file:
YY_NUM_RULES	src/parsing/lex.yy.c	401;"	d	file:
YY_READ_BUF_SIZE	src/parsing/lex.yy.c	644;"	d	file:
YY_READ_BUF_SIZE	src/parsing/lex.yy.c	646;"	d	file:
YY_REDUCE_PRINT	src/parsing/parse.tab.c	774;"	d	file:
YY_REDUCE_PRINT	src/parsing/parse.tab.c	787;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	src/parsing/lex.yy.c	544;"	d	file:
YY_RULE_SETUP	src/parsing/lex.yy.c	737;"	d	file:
YY_SC_TO_UI	src/parsing/lex.yy.c	120;"	d	file:
YY_SKIP_YYWRAP	src/parsing/lex.yy.c	365;"	d	file:
YY_STACK_PRINT	src/parsing/parse.tab.c	743;"	d	file:
YY_STACK_PRINT	src/parsing/parse.tab.c	786;"	d	file:
YY_START	src/parsing/lex.yy.c	132;"	d	file:
YY_START_STACK_INCR	src/parsing/lex.yy.c	704;"	d	file:
YY_STATE_BUF_SIZE	src/parsing/lex.yy.c	158;"	d	file:
YY_STATE_EOF	src/parsing/lex.yy.c	136;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	src/parsing/lex.yy.c	217;"	d	file:
YY_SYMBOL_PRINT	src/parsing/parse.tab.c	680;"	d	file:
YY_SYMBOL_PRINT	src/parsing/parse.tab.c	785;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	src/parsing/lex.yy.c	161;"	d	file:
YY_TYPEDEF_YY_SIZE_T	src/parsing/lex.yy.c	166;"	d	file:
YY_USER_ACTION	src/parsing/lex.yy.c	729;"	d	file:
YY_USE_CONST	src/parsing/lex.yy.c	101;"	d	file:
YY_USE_CONST	src/parsing/lex.yy.c	94;"	d	file:
YY_YY_SRC_PARSING_PARSE_TAB_H_INCLUDED	src/parsing/parse.tab.c	107;"	d	file:
YY_YY_SRC_PARSING_PARSE_TAB_H_INCLUDED	src/parsing/parse.tab.h	34;"	d
_Noreturn	src/parsing/parse.tab.c	266;"	d	file:
_Noreturn	src/parsing/parse.tab.c	268;"	d	file:
__STDC_LIMIT_MACROS	src/parsing/lex.yy.c	40;"	d	file:
__condense_string_array	src/parsing/parsing_interface.c	/^static char* __condense_string_array(char** str_arr) {$/;"	f	file:
__destroy_memory_pool	src/parsing/memory_pool.c	/^static void __destroy_memory_pool(MemoryPool mp) {$/;"	f	file:
__initialize_memory_pool	src/parsing/memory_pool.c	/^static MemoryPool __initialize_memory_pool(size_t size) {$/;"	f	file:
__interpret_deref	src/parsing/parsing_interface.c	/^static void __interpret_deref(MPStrBuilder* bld, const char* str, int* idx) {$/;"	f	file:
__is_first_identifier_char	src/parsing/parsing_interface.c	/^static inline bool __is_first_identifier_char(char c) {$/;"	f	file:
__is_identifier_char	src/parsing/parsing_interface.c	/^static inline bool __is_identifier_char(char c) {$/;"	f	file:
__low_memory_initialize_memory_pool	src/parsing/memory_pool.c	/^static MemoryPool __low_memory_initialize_memory_pool(size_t required_size,$/;"	f	file:
__print_cd_cmd	src/command.c	/^static void __print_cd_cmd(CDCommand cmd) {$/;"	f	file:
__print_command	src/command.c	/^static void __print_command(Command cmd) {$/;"	f	file:
__print_command_holder	src/command.c	/^static void __print_command_holder(CommandHolder holder) {$/;"	f	file:
__print_echo_cmd	src/command.c	/^static void __print_echo_cmd(EchoCommand cmd) {$/;"	f	file:
__print_export_cmd	src/command.c	/^static void __print_export_cmd(ExportCommand cmd) {$/;"	f	file:
__print_generic_cmd	src/command.c	/^static void __print_generic_cmd(GenericCommand cmd) {$/;"	f	file:
__print_kill_cmd	src/command.c	/^static void __print_kill_cmd(KillCommand cmd) {$/;"	f	file:
__print_simple_cmd	src/command.c	/^static void __print_simple_cmd(const char* str) {$/;"	f	file:
__stringify_cd_cmd	src/parsing/parsing_interface.c	/^static void __stringify_cd_cmd(CDCommand cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_command	src/parsing/parsing_interface.c	/^static void __stringify_command(Command cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_echo_cmd	src/parsing/parsing_interface.c	/^static inline void __stringify_echo_cmd(EchoCommand cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_export_cmd	src/parsing/parsing_interface.c	/^static void __stringify_export_cmd(ExportCommand cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_generic_cmd	src/parsing/parsing_interface.c	/^static inline void __stringify_generic_cmd(GenericCommand cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_holder	src/parsing/parsing_interface.c	/^static void __stringify_holder(CommandHolder holder, CmdStrs* strs) {$/;"	f	file:
__stringify_kill_cmd	src/parsing/parsing_interface.c	/^static void __stringify_kill_cmd(KillCommand cmd, CmdStrs* strs) {$/;"	f	file:
__stringify_script	src/parsing/parsing_interface.c	/^static void __stringify_script(const CommandHolder* holders, CmdStrs* strs) {$/;"	f	file:
__stringify_simple_cmd	src/parsing/parsing_interface.c	/^static void __stringify_simple_cmd(const char* str, CmdStrs* strs) {$/;"	f	file:
a 	doc/html/doxygen.css	/^a {$/;"	s
a.SRScope 	doc/html/search/search.css	/^a.SRScope {$/;"	s
a.SRScope:active 	doc/html/search/search.css	/^a.SRScope:focus, a.SRScope:active {$/;"	s
a.SRScope:focus	doc/html/search/search.css	/^a.SRScope:focus, a.SRScope:active {$/;"	s
a.SRSymbol:active	doc/html/search/search.css	/^a.SRSymbol:focus, a.SRSymbol:active,$/;"	s
a.SRSymbol:focus	doc/html/search/search.css	/^a.SRSymbol:focus, a.SRSymbol:active,$/;"	s
a.SelectItem 	doc/html/search/search.css	/^a.SelectItem {$/;"	s
a.SelectItem:active 	doc/html/search/search.css	/^a.SelectItem:active {$/;"	s
a.SelectItem:focus	doc/html/search/search.css	/^a.SelectItem:focus,$/;"	s
a.SelectItem:hover 	doc/html/search/search.css	/^a.SelectItem:hover {$/;"	s
a.code	doc/html/doxygen.css	/^a.code, a.code:visited, a.line, a.line:visited {$/;"	s
a.code:visited	doc/html/doxygen.css	/^a.code, a.code:visited, a.line, a.line:visited {$/;"	s
a.codeRef	doc/html/doxygen.css	/^a.codeRef, a.codeRef:visited, a.lineRef, a.lineRef:visited {$/;"	s
a.codeRef:visited	doc/html/doxygen.css	/^a.codeRef, a.codeRef:visited, a.lineRef, a.lineRef:visited {$/;"	s
a.el 	doc/html/doxygen.css	/^a.el {$/;"	s
a.elRef 	doc/html/doxygen.css	/^a.elRef {$/;"	s
a.line	doc/html/doxygen.css	/^a.code, a.code:visited, a.line, a.line:visited {$/;"	s
a.line:visited 	doc/html/doxygen.css	/^a.code, a.code:visited, a.line, a.line:visited {$/;"	s
a.lineRef	doc/html/doxygen.css	/^a.codeRef, a.codeRef:visited, a.lineRef, a.lineRef:visited {$/;"	s
a.lineRef:visited 	doc/html/doxygen.css	/^a.codeRef, a.codeRef:visited, a.lineRef, a.lineRef:visited {$/;"	s
a.qindex 	doc/html/doxygen.css	/^a.qindex {$/;"	s
a.qindexHL 	doc/html/doxygen.css	/^a.qindexHL {$/;"	s
a:hover 	doc/html/doxygen.css	/^a:hover {$/;"	s
address 	doc/html/doxygen.css	/^address {$/;"	s
address.footer 	doc/html/doxygen.css	/^address.footer {$/;"	s
alloca	src/parsing/parse.tab.c	313;"	d	file:
ans-serif	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
ans-serif	doc/html/doxygen.css	/^	font: 120% Tahoma, Arial,sans-serif;$/;"	s
ans-serif	doc/html/doxygen.css	/^	font: 300% Tahoma, Arial,sans-serif;$/;"	s
ans-serif	doc/html/doxygen.css	/^	font: 50% Tahoma, Arial,sans-serif;$/;"	s
append	src/parsing/parsing_interface.h	/^  bool append; \/**< Flag indicating that the redirect out should actually append$/;"	m	struct:Redirect
args	src/command.h	/^  char** args;      \/**< A NULL terminated array of c-strings ready to pass to$/;"	m	struct:GenericCommand
back	src/deque.h	/^  size_t back;  \/**< The index one greater than the last element of the queue *\/$/;"	m	struct:Example
background-color: #F9FAFC	doc/html/doxygen.css	/^	background-color: #F9FAFC;$/;"	s
background-image:none	doc/html/doxygen.css	/^        background-image:none;$/;"	s
background-image:url	doc/html/doxygen.css	/^	background-image:url('bc_s.png');$/;"	s
background-image:url	doc/html/doxygen.css	/^	background-image:url('tab_b.png');$/;"	s
background-position: 0 -5px	doc/html/doxygen.css	/^	background-position: 0 -5px;$/;"	s
background-position:right	doc/html/doxygen.css	/^	background-position:right;$/;"	s
background-position:right	doc/html/doxygen.css	/^        background-position:right;$/;"	s
background-position:right	doc/html/search/search.css	/^    background-position:right;$/;"	s
background-repeat:no-repeat	doc/html/doxygen.css	/^	background-repeat:no-repeat;$/;"	s
background-repeat:no-repeat	doc/html/doxygen.css	/^        background-repeat:no-repeat;$/;"	s
background-repeat:repeat-x	doc/html/doxygen.css	/^	background-repeat:repeat-x;$/;"	s
background-repeat:repeat-x	doc/html/doxygen.css	/^        background-repeat:repeat-x;$/;"	s
background:url	doc/html/search/search.css	/^    background:url('search_l.png') no-repeat;$/;"	s
bc_s.png	doc/html/doxygen.css	/^	background-image:url('bc_s.png');$/;"	s
blockquote 	doc/html/doxygen.css	/^blockquote {$/;"	s
body	doc/html/doxygen.css	/^body, table, div, p, dl {$/;"	s
body 	doc/html/doxygen.css	/^  body { overflow:visible; }$/;"	s
body 	doc/html/doxygen.css	/^body {$/;"	s
body.SRPage 	doc/html/search/search.css	/^body.SRPage {$/;"	s
border-bottom: 1px solid #5373B4	doc/html/doxygen.css	/^	border-bottom: 1px solid #5373B4;$/;"	s
border-bottom: 1px solid #C4CFE5	doc/html/doxygen.css	/^	border-bottom: 1px solid #C4CFE5;$/;"	s
border-collapse: separate	doc/html/doxygen.css	/^	border-collapse: separate;$/;"	s
border-color: #00C0E0	doc/html/doxygen.css	/^        border-color: #00C0E0;$/;"	s
border-color: #00D000	doc/html/doxygen.css	/^        border-color: #00D000;$/;"	s
border-color: #3030E0	doc/html/doxygen.css	/^        border-color: #3030E0;$/;"	s
border-color: #505050	doc/html/doxygen.css	/^        border-color: #505050;$/;"	s
border-color: #C08050	doc/html/doxygen.css	/^        border-color: #C08050;$/;"	s
border-color: #D0C000	doc/html/doxygen.css	/^        border-color: #D0C000;$/;"	s
border-color: #FF0000	doc/html/doxygen.css	/^        border-color: #FF0000;$/;"	s
border-left:4px solid	doc/html/doxygen.css	/^        border-left:4px solid;$/;"	s
border-spacing: 0	doc/html/doxygen.css	/^        border-spacing: 0; $/;"	s
border: 0	doc/html/doxygen.css	/^        border: 0;$/;"	s
border:solid 1px #C2CDE4	doc/html/doxygen.css	/^	border:solid 1px #C2CDE4;$/;"	s
cap	src/deque.h	/^  size_t cap;   \/**< The current capacity of the deque *\/$/;"	m	struct:Example
caption 	doc/html/doxygen.css	/^caption {$/;"	s
cd	src/command.h	/^  CDCommand cd;           \/**< Read structure as a @a CDCommand *\/$/;"	m	union:Command
check_jobs_bg_status	src/execute.c	/^void check_jobs_bg_status() {$/;"	f
cmd	src/command.h	/^  Command cmd;        \/**< A @a Command to hold *\/$/;"	m	struct:CommandHolder
cmd	src/parsing/parse.tab.c	/^  Command cmd;$/;"	m	union:YYSTYPE	file:
cmd	src/parsing/parse.tab.h	/^  Command cmd;$/;"	m	union:YYSTYPE
cmd	src/parsing/parse.y	/^cmd:    first_string cmd_arguments {$/;"	l
cmd_arguments	src/parsing/parse.y	/^cmd_arguments: string {$/;"	l
cmd_bg	src/parsing/parse.y	/^cmd_bg: {$/;"	l
cmd_content	src/parsing/parse.y	/^cmd_content: cmd {$/;"	l
cmd_list	src/parsing/parse.tab.c	/^  Cmds cmd_list;$/;"	m	union:YYSTYPE	file:
cmd_list	src/parsing/parse.tab.h	/^  Cmds cmd_list;$/;"	m	union:YYSTYPE
cmd_strs	src/parsing/parse.tab.c	/^  CmdStrs cmd_strs;$/;"	m	union:YYSTYPE	file:
cmd_strs	src/parsing/parse.tab.h	/^  CmdStrs cmd_strs;$/;"	m	union:YYSTYPE
cmd_top	src/parsing/parse.y	/^cmd_top: cmd_content redir cmd_bg {$/;"	l
cmds	src/parsing/parse.y	/^cmds:   cmd_top {$/;"	l
color: #283A5D	doc/html/doxygen.css	/^	color: #283A5D;$/;"	s
color:#364D7C	doc/html/doxygen.css	/^	color:#364D7C;$/;"	s
color:#364D7C	doc/html/doxygen.css	/^        color:#364D7C;$/;"	s
color:#8AA0CC	doc/html/doxygen.css	/^	color:#8AA0CC;$/;"	s
convertToId	doc/html/search/search.js	/^function convertToId(search)$/;"	f
createResults	doc/html/search/search.js	/^function createResults()$/;"	f
create_process	src/execute.c	/^void create_process(CommandHolder holder) {$/;"	f
data	src/deque.h	/^  Type* data;   \/**< The array holding the deque *\/$/;"	m	struct:Example
debug_print_script	src/command.c	/^void debug_print_script(const CommandHolder* holders) {$/;"	f
define-members	doc/html/command_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"><\/a>$/;"	a
define-members	doc/html/debug_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"><\/a>$/;"	a
define-members	doc/html/deque_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"><\/a>$/;"	a
define-members	doc/html/execute_8c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"><\/a>$/;"	a
define-members	doc/html/memory__pool_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"><\/a>$/;"	a
destroy_lex	src/parsing/lex.yy.c	/^void destroy_lex() {$/;"	f
destroy_memory_pool	src/parsing/memory_pool.c	/^void destroy_memory_pool() {$/;"	f
destroy_parser	src/parsing/parsing_interface.c	/^void destroy_parser() {$/;"	f
destructor	src/deque.h	/^  void (*destructor)(Type); \/**< Optional destructor function pointer for the$/;"	m	struct:Example
details	doc/html/command_8c.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/command_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/debug_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/deque_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/execute_8c.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/execute_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/group__DEQUE.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/memory__pool_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/parsing__interface_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/quash_8c.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/quash_8h.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structCDCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structCommandHolder.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structExample.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structExportCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structGenericCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structKillCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structMemoryPool.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structQuashState.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structRedirect.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/structSimpleCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
details	doc/html/unionCommand.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
dir	src/command.h	/^  char* dir;        \/**< Path to the directory we wish to change to *\/$/;"	m	struct:CDCommand
display:block	doc/html/doxygen.css	/^	display:block;$/;"	s
div	doc/html/doxygen.css	/^body, table, div, p, dl {$/;"	s
div.ah	doc/html/doxygen.css	/^div.ah, span.ah {$/;"	s
div.center 	doc/html/doxygen.css	/^div.center {$/;"	s
div.center img 	doc/html/doxygen.css	/^div.center img {$/;"	s
div.classindex span.ai 	doc/html/doxygen.css	/^div.classindex span.ai {$/;"	s
div.classindex ul 	doc/html/doxygen.css	/^div.classindex ul {$/;"	s
div.contents 	doc/html/doxygen.css	/^div.contents {$/;"	s
div.directory 	doc/html/doxygen.css	/^div.directory {$/;"	s
div.dynheader 	doc/html/doxygen.css	/^div.dynheader {$/;"	s
div.fragment 	doc/html/doxygen.css	/^div.fragment {$/;"	s
div.groupHeader 	doc/html/doxygen.css	/^div.groupHeader {$/;"	s
div.groupText 	doc/html/doxygen.css	/^div.groupText {$/;"	s
div.headertitle{	padding: 5px 5px 5px 10px	doc/html/doxygen.css	/^	padding: 5px 5px 5px 10px;$/;"	s
div.header{        background-image:url	doc/html/doxygen.css	/^        background-image:url('nav_h.png');$/;"	s
div.ingroups a{	white-space: nowrap	doc/html/doxygen.css	/^	white-space: nowrap;$/;"	s
div.ingroups{	font-size: 8pt	doc/html/doxygen.css	/^	font-size: 8pt;$/;"	s
div.line 	doc/html/doxygen.css	/^div.line {$/;"	s
div.line.glow 	doc/html/doxygen.css	/^div.line.glow {$/;"	s
div.line:after 	doc/html/doxygen.css	/^div.line:after {$/;"	s
div.multicol 	doc/html/doxygen.css	/^div.multicol {$/;"	s
div.navpath 	doc/html/doxygen.css	/^div.qindex, div.navpath {$/;"	s
div.navtab	doc/html/doxygen.css	/^div.qindex, div.navtab{$/;"	s
div.navtab 	doc/html/doxygen.css	/^div.navtab {$/;"	s
div.qindex	doc/html/doxygen.css	/^div.qindex, div.navpath {$/;"	s
div.qindex	doc/html/doxygen.css	/^div.qindex, div.navtab{$/;"	s
div.summary a{	white-space: nowrap	doc/html/doxygen.css	/^	white-space: nowrap;$/;"	s
div.summary{	float: right	doc/html/doxygen.css	/^	float: right;$/;"	s
div.toc 	doc/html/doxygen.css	/^div.toc {$/;"	s
div.toc h3 	doc/html/doxygen.css	/^div.toc h3 {$/;"	s
div.toc li 	doc/html/doxygen.css	/^div.toc li {$/;"	s
div.toc li.level1 	doc/html/doxygen.css	/^div.toc li.level1 {$/;"	s
div.toc li.level2 	doc/html/doxygen.css	/^div.toc li.level2 {$/;"	s
div.toc li.level3 	doc/html/doxygen.css	/^div.toc li.level3 {$/;"	s
div.toc li.level4 	doc/html/doxygen.css	/^div.toc li.level4 {$/;"	s
div.toc ul 	doc/html/doxygen.css	/^div.toc ul {$/;"	s
div.zoom{	border: 1px solid #90A5CE	doc/html/doxygen.css	/^	border: 1px solid #90A5CE;$/;"	s
dl 	doc/html/doxygen.css	/^body, table, div, p, dl {$/;"	s
dl.attention{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.bug{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.citelist 	doc/html/doxygen.css	/^dl.citelist {$/;"	s
dl.citelist dd 	doc/html/doxygen.css	/^dl.citelist dd {$/;"	s
dl.citelist dt 	doc/html/doxygen.css	/^dl.citelist dt {$/;"	s
dl.deprecated{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.el 	doc/html/doxygen.css	/^dl.el {$/;"	s
dl.invariant{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.note{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.post	doc/html/doxygen.css	/^dl.pre, dl.post, dl.invariant$/;"	s
dl.pre	doc/html/doxygen.css	/^dl.pre, dl.post, dl.invariant$/;"	s
dl.reflist dd 	doc/html/doxygen.css	/^.memdoc, dl.reflist dd {$/;"	s
dl.reflist dd 	doc/html/doxygen.css	/^dl.reflist dd {$/;"	s
dl.reflist dt 	doc/html/doxygen.css	/^.memproto, dl.reflist dt {$/;"	s
dl.reflist dt 	doc/html/doxygen.css	/^dl.reflist dt {$/;"	s
dl.section dd 	doc/html/doxygen.css	/^dl.section dd {$/;"	s
dl.section{	margin-left: 0px	doc/html/doxygen.css	/^	margin-left: 0px;$/;"	s
dl.test{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.todo{        margin-left:-7px	doc/html/doxygen.css	/^        margin-left:-7px;$/;"	s
dl.warning	doc/html/doxygen.css	/^dl.warning, dl.attention$/;"	s
dl{        padding: 0 0 0 10px	doc/html/doxygen.css	/^        padding: 0 0 0 10px;$/;"	s
dt 	doc/html/doxygen.css	/^dt {$/;"	s
echo	src/command.h	/^  EchoCommand echo;       \/**< Read structure as a @a ExportCommand *\/$/;"	m	union:Command
elvetica	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
end_main_loop	src/quash.c	/^void end_main_loop() {$/;"	f
enum-members	doc/html/command_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"><\/a>$/;"	a
env_var	src/command.h	/^  char* env_var;    \/**< Name of environment variable to set *\/$/;"	m	struct:ExportCommand
eoc	src/command.h	/^  EOCCommand eoc;         \/**< Read structure as a @a EOCCommand *\/$/;"	m	union:Command
example_run_command	src/execute.c	/^void example_run_command(Command cmd) {$/;"	f
exit	src/command.h	/^  ExitCommand exit;       \/**< Read structure as a @a ExitCommand *\/$/;"	m	union:Command
export	src/command.h	/^  ExportCommand export;   \/**< Read structure as a @a ExportCommand *\/$/;"	m	union:Command
files	doc/html/dir_3fb67633942bd84f7aa391e58ba835b3.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
files	doc/html/dir_68267d1309a1af8e8297ef4c3efbcdba.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"><\/a>$/;"	a
first_string	src/parsing/parse.y	/^first_string: STR {$/;"	l
flags	src/command.h	/^  char flags;         \/**< A set of bits that hold information about how to execute the$/;"	m	struct:CommandHolder
flex_int16_t	src/parsing/lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	src/parsing/lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	src/parsing/lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	src/parsing/lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	src/parsing/lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	src/parsing/lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	src/parsing/lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	src/parsing/lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	src/parsing/lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	src/parsing/lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	src/parsing/lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	src/parsing/lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
float:left	doc/html/doxygen.css	/^	float:left;$/;"	s
float:right	doc/html/doxygen.css	/^        float:right;$/;"	s
font-family: 	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
font-size: 8pt	doc/html/doxygen.css	/^	font-size: 8pt;$/;"	s
font-size: 8pt	doc/html/doxygen.css	/^        font-size: 8pt;$/;"	s
front	src/deque.h	/^  size_t front; \/**< The index of the element at the front of the deque *\/$/;"	m	struct:Example
func-members	doc/html/command_8c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/command_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/deque_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/execute_8c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/execute_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/group__DEQUE.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/memory__pool_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/parsing__interface_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/quash_8c.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
func-members	doc/html/quash_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"><\/a>$/;"	a
generate_expectation_file	run_tests.bash	/^generate_expectation_file() {$/;"	f
generic	src/command.h	/^  GenericCommand generic; \/**< Read structure as a @a GenericCommand *\/$/;"	m	union:Command
getXPos	doc/html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	doc/html/search/search.js	/^function getYPos(item)$/;"	f
get_command_holder_type	src/command.c	/^CommandType get_command_holder_type(CommandHolder holder) {$/;"	f
get_command_string	src/quash.c	/^char* get_command_string() {$/;"	f
get_command_type	src/command.c	/^CommandType get_command_type(Command cmd) {$/;"	f
get_current_directory	src/execute.c	/^char* get_current_directory(bool* should_free) {$/;"	f
h1	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h1	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h1.glow	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
h1.groupheader 	doc/html/doxygen.css	/^h1.groupheader {$/;"	s
h2	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h2	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h2.glow	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
h2.groupheader 	doc/html/doxygen.css	/^h2.groupheader {$/;"	s
h3	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h3	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h3.glow	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
h3.groupheader 	doc/html/doxygen.css	/^h3.groupheader {$/;"	s
h3.version 	doc/html/doxygen.css	/^h3.version {$/;"	s
h4	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h4	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h4.glow	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
h5	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h5	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h5.glow	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
h6 	doc/html/doxygen.css	/^  h1, h2, h3, h4, h5, h6 { page-break-after: avoid; }$/;"	s
h6 	doc/html/doxygen.css	/^h1, h2, h3, h4, h5, h6 {$/;"	s
h6.glow 	doc/html/doxygen.css	/^h1.glow, h2.glow, h3.glow, h4.glow, h5.glow, h6.glow {$/;"	s
height:19px	doc/html/search/search.css	/^    height:19px;$/;"	s
height:30px	doc/html/doxygen.css	/^	height:30px;$/;"	s
holder	src/parsing/parse.tab.c	/^  CommandHolder holder;$/;"	m	union:YYSTYPE	file:
holder	src/parsing/parse.tab.h	/^  CommandHolder holder;$/;"	m	union:YYSTYPE
holder_arr	src/parsing/parse.tab.c	/^  CommandHolder* holder_arr;$/;"	m	union:YYSTYPE	file:
holder_arr	src/parsing/parse.tab.h	/^  CommandHolder* holder_arr;$/;"	m	union:YYSTYPE
hr 	doc/html/doxygen.css	/^hr {$/;"	s
hr.footer 	doc/html/doxygen.css	/^hr.footer {$/;"	s
iframe#MSearchResults 	doc/html/search/search.css	/^iframe#MSearchResults {$/;"	s
img.footer 	doc/html/doxygen.css	/^img.footer {$/;"	s
img.formulaDsp 	doc/html/doxygen.css	/^img.formulaDsp {$/;"	s
img.formulaInl 	doc/html/doxygen.css	/^img.formulaInl {$/;"	s
in	src/parsing/parsing_interface.h	/^  char* in;    \/**< File name for redirect in. *\/$/;"	m	struct:Redirect
init_search	doc/html/search/search.js	/^function init_search()$/;"	f
initial_state	src/quash.c	/^static QuashState initial_state() {$/;"	f	file:
initialize_memory_pool	src/parsing/memory_pool.c	/^void initialize_memory_pool(size_t size) {$/;"	f
integer	src/parsing/parse.tab.c	/^  int integer;$/;"	m	union:YYSTYPE	file:
integer	src/parsing/parse.tab.h	/^  int integer;$/;"	m	union:YYSTYPE
interpret_complex_string_token	src/parsing/parsing_interface.c	/^char* interpret_complex_string_token(const char* str) {$/;"	f
is_a_tty	src/quash.h	/^  bool is_a_tty;    \/**< Indicates if the shell is receiving input from a file$/;"	m	struct:QuashState
is_running	src/quash.c	/^bool is_running() {$/;"	f
is_tty	src/quash.c	/^bool is_tty() {$/;"	f
job	src/command.h	/^  int job;          \/**< Job id number *\/$/;"	m	struct:KillCommand
job_str	src/command.h	/^  char* job_str;    \/**< String holding the job id number (used for printing) *\/$/;"	m	struct:KillCommand
jobs	src/command.h	/^  JobsCommand jobs;       \/**< Read structure as a @a JobsCommand *\/$/;"	m	union:Command
kill	src/command.h	/^  KillCommand kill;       \/**< Read structure as a @a KillCommand *\/$/;"	m	union:Command
l00001	doc/html/command_8h_source.html	/^<a href="command_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#ifndef SRC_COMMAND_H<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#define SRC_COMMAND_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno"><a class="line" href="command_8h.html#ab6714acca9cb634f10b7f5a23c349e3e">   48<\/a><\/span>&#160;<span class="preprocessor">#define REDIRECT_IN     (0x01)<\/span><\/div><div class="line"><a name="l00049"><\/a><span class="lineno"><a class="line" href="command_8h.html#af178f598332c2233dfbdc334a05a2a66">   49<\/a><\/span>&#160;<span class="preprocessor">#define REDIRECT_OUT    (0x04)<\/span><\/div><div class="line"><a name="l00050"><\/a><span class="lineno"><a class="line" href="command_8h.html#a6b682fe2ba1a0c489d50822c3feecdac">   50<\/a><\/span>&#160;<span class="preprocessor">#define REDIRECT_APPEND (0x08)<\/span><\/div><div class="line"><a name="l00051"><\/a><span class="lineno"><a class="line" href="command_8h.html#a3fc15bc38c2cd3ce6f7dd40f4c0115dd">   51<\/a><\/span>&#160;<span class="preprocessor">#define PIPE_IN         (0x10)<\/span><\/div><div class="line"><a name="l00052"><\/a><span class="lineno"><a class="line" href="command_8h.html#af2aa1b20c10d6507c47f11588e21c324">   52<\/a><\/span>&#160;<span class="preprocessor">#define PIPE_OUT        (0x20)<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno"><a class="line" href="command_8h.html#a850b2f07a67b73890889e63fb8a49fda">   53<\/a><\/span>&#160;<span class="preprocessor">#define BACKGROUND      (0x40)<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno"><a class="line" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">   63<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">enum<\/span> <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> {<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;  EOC = 0, <span class="comment">\/\/ pseudo-command for marking the end of a script<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;  GENERIC,<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;  ECHO,<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;  EXPORT,<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;  KILL,<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;  CD,<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;  PWD,<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;  JOBS,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;  EXIT<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;} <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a>;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="comment">\/\/ Command Structures<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="comment">\/\/<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="comment">\/\/ All command structures must begin with the `CommandType type` field since this<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="comment">\/\/ is used to determine what the structure is after it is placed in a `union<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="comment">\/\/ Command` structure.<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno"><a class="line" href="structSimpleCommand.html">   89<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> {<\/div><div class="line"><a name="l00090"><\/a><span class="lineno"><a class="line" href="structSimpleCommand.html#a9048c04ff50ab9364d56e04e5c3e8ee0">   90<\/a><\/span>&#160;  <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="structSimpleCommand.html#a9048c04ff50ab9364d56e04e5c3e8ee0">type<\/a>; <\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;} <a class="code" href="command_8h.html#a441aa8b607f4daafbace05e2f90a4a96">SimpleCommand<\/a>;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno"><a class="line" href="structGenericCommand.html">   99<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structGenericCommand.html">GenericCommand<\/a> {<\/div><div class="line"><a name="l00100"><\/a><span class="lineno"><a class="line" href="structGenericCommand.html#af50a1b4b5724e01b97f4755627de108e">  100<\/a><\/span>&#160;  <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="structGenericCommand.html#af50a1b4b5724e01b97f4755627de108e">type<\/a>; <\/div><div class="line"><a name="l00101"><\/a><span class="lineno"><a class="line" href="structGenericCommand.html#a0f2219278396d334144d424c02fd6389">  101<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>** <a class="code" href="structGenericCommand.html#a0f2219278396d334144d424c02fd6389">args<\/a>;      <\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;} <a class="code" href="command_8h.html#a0ef74bc9c69d51a796c9302c7ccceaf4">GenericCommand<\/a>;<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno"><a class="line" href="command_8h.html#a8dc22d719c880c1ffcd9bc2dc5773633">  112<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="structGenericCommand.html">GenericCommand<\/a> <a class="code" href="command_8h.html#a8dc22d719c880c1ffcd9bc2dc5773633">EchoCommand<\/a>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno"><a class="line" href="structExportCommand.html">  119<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structExportCommand.html">ExportCommand<\/a> {<\/div><div class="line"><a name="l00120"><\/a><span class="lineno"><a class="line" href="structExportCommand.html#a6089a285f9584b6f1c5430b46a9c0758">  120<\/a><\/span>&#160;  <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="structExportCommand.html#a6089a285f9584b6f1c5430b46a9c0758">type<\/a>; <\/div><div class="line"><a name="l00121"><\/a><span class="lineno"><a class="line" href="structExportCommand.html#a8343f52c0f5198ccb21ed3f0c13d5842">  121<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structExportCommand.html#a8343f52c0f5198ccb21ed3f0c13d5842">env_var<\/a>;    <\/div><div class="line"><a name="l00122"><\/a><span class="lineno"><a class="line" href="structExportCommand.html#a8e75db85606e5f9cfcc149c116c3be51">  122<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structExportCommand.html#a8e75db85606e5f9cfcc149c116c3be51">val<\/a>;        <\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;} <a class="code" href="command_8h.html#a5ed855745123c2e263602a648d278e2d">ExportCommand<\/a>;<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<\/div><div class="line"><a name="l00131"><\/a><span class="lineno"><a class="line" href="structCDCommand.html">  131<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structCDCommand.html">CDCommand<\/a> {<\/div><div class="line"><a name="l00132"><\/a><span class="lineno"><a class="line" href="structCDCommand.html#a8e57e7a2c0aa827e7f211cd0b99483f6">  132<\/a><\/span>&#160;  <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="structCDCommand.html#a8e57e7a2c0aa827e7f211cd0b99483f6">type<\/a>; <\/div><div class="line"><a name="l00133"><\/a><span class="lineno"><a class="line" href="structCDCommand.html#a3696e9b5a96ed447056a4753906277d1">  133<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structCDCommand.html#a3696e9b5a96ed447056a4753906277d1">dir<\/a>;        <\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;} <a class="code" href="command_8h.html#a6f3ad3bbbda0a33e3f38850d82146ba9">CDCommand<\/a>;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<\/div><div class="line"><a name="l00141"><\/a><span class="lineno"><a class="line" href="structKillCommand.html">  141<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structKillCommand.html">KillCommand<\/a> {<\/div><div class="line"><a name="l00142"><\/a><span class="lineno"><a class="line" href="structKillCommand.html#a9cd678bc0659f74340e3fca28766bcda">  142<\/a><\/span>&#160;  <a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="structKillCommand.html#a9cd678bc0659f74340e3fca28766bcda">type<\/a>; <\/div><div class="line"><a name="l00143"><\/a><span class="lineno"><a class="line" href="structKillCommand.html#a20f5367bbec80a936189c57b1f9db351">  143<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="structKillCommand.html#a20f5367bbec80a936189c57b1f9db351">sig<\/a>;          <\/div><div class="line"><a name="l00144"><\/a><span class="lineno"><a class="line" href="structKillCommand.html#abd4689c605a3dfe202a1779f0d1191ae">  144<\/a><\/span>&#160;  <span class="keywordtype">int<\/span> <a class="code" href="structKillCommand.html#abd4689c605a3dfe202a1779f0d1191ae">job<\/a>;          <\/div><div class="line"><a name="l00145"><\/a><span class="lineno"><a class="line" href="structKillCommand.html#a879a36b90427ec640bef5c92a6c9c24e">  145<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structKillCommand.html#a879a36b90427ec640bef5c92a6c9c24e">sig_str<\/a>;    <\/div><div class="line"><a name="l00146"><\/a><span class="lineno"><a class="line" href="structKillCommand.html#a174a9714a69550b0bbf611e59bfbf332">  146<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structKillCommand.html#a174a9714a69550b0bbf611e59bfbf332">job_str<\/a>;    <\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;} <a class="code" href="command_8h.html#afb57c1d862fa262c422d32473e1d84c9">KillCommand<\/a>;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<\/div><div class="line"><a name="l00154"><\/a><span class="lineno"><a class="line" href="command_8h.html#a0c0e44e3e2b07b1e9b48023205cb4ca2">  154<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> <a class="code" href="command_8h.html#a0c0e44e3e2b07b1e9b48023205cb4ca2">PWDCommand<\/a>;<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno"><a class="line" href="command_8h.html#a027de4ed5fe4b0313c6c8ee0c2c1806b">  161<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> <a class="code" href="command_8h.html#a027de4ed5fe4b0313c6c8ee0c2c1806b">JobsCommand<\/a>;<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<\/div><div class="line"><a name="l00168"><\/a><span class="lineno"><a class="line" href="command_8h.html#a354cb87bc40859e5595de56b675732bc">  168<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> <a class="code" href="command_8h.html#a354cb87bc40859e5595de56b675732bc">ExitCommand<\/a>;<\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<\/div><div class="line"><a name="l00175"><\/a><span class="lineno"><a class="line" href="command_8h.html#ae5bf5cf7a34428c221f28179034dd125">  175<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> <a class="code" href="command_8h.html#ae5bf5cf7a34428c221f28179034dd125">EOCCommand<\/a>;<\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno"><a class="line" href="unionCommand.html">  188<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">union <\/span><a class="code" href="unionCommand.html">Command<\/a> {<\/div><div class="line"><a name="l00189"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a269da4d9b16689de14a0ec83636b59e8">  189<\/a><\/span>&#160;  <a class="code" href="structSimpleCommand.html">SimpleCommand<\/a> <a class="code" href="unionCommand.html#a269da4d9b16689de14a0ec83636b59e8">simple<\/a>;   <\/div><div class="line"><a name="l00190"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a22a7dad0e3935c261a1643c8c5ea46aa">  190<\/a><\/span>&#160;  <a class="code" href="structGenericCommand.html">GenericCommand<\/a> <span class="keyword">generic<\/span>; <\/div><div class="line"><a name="l00191"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a74de4769cc35dac9a3f7dfd24cb87ad7">  191<\/a><\/span>&#160;  <a class="code" href="structGenericCommand.html">EchoCommand<\/a> <a class="code" href="unionCommand.html#a74de4769cc35dac9a3f7dfd24cb87ad7">echo<\/a>;       <\/div><div class="line"><a name="l00192"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a57e7a8eb0763aa7105d3bc6a52e59da3">  192<\/a><\/span>&#160;  <a class="code" href="structExportCommand.html">ExportCommand<\/a> <a class="code" href="unionCommand.html#a57e7a8eb0763aa7105d3bc6a52e59da3">export<\/a>;   <\/div><div class="line"><a name="l00193"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a488c8f6e6ce10f7c9126f37c5f37776d">  193<\/a><\/span>&#160;  <a class="code" href="structCDCommand.html">CDCommand<\/a> <a class="code" href="unionCommand.html#a488c8f6e6ce10f7c9126f37c5f37776d">cd<\/a>;           <\/div><div class="line"><a name="l00194"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a19c5261961f2f9a7fcbf9f5379d3f98a">  194<\/a><\/span>&#160;  <a class="code" href="structKillCommand.html">KillCommand<\/a> <a class="code" href="unionCommand.html#a19c5261961f2f9a7fcbf9f5379d3f98a">kill<\/a>;       <\/div><div class="line"><a name="l00195"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a34fc21bb2a7fee2df4d3674b9d8166ff">  195<\/a><\/span>&#160;  <a class="code" href="structSimpleCommand.html">PWDCommand<\/a> <a class="code" href="unionCommand.html#a34fc21bb2a7fee2df4d3674b9d8166ff">pwd<\/a>;         <\/div><div class="line"><a name="l00196"><\/a><span class="lineno"><a class="line" href="unionCommand.html#abeb4905f11baf90a800fe211dd5ecdc9">  196<\/a><\/span>&#160;  <a class="code" href="structSimpleCommand.html">JobsCommand<\/a> <a class="code" href="unionCommand.html#abeb4905f11baf90a800fe211dd5ecdc9">jobs<\/a>;       <\/div><div class="line"><a name="l00197"><\/a><span class="lineno"><a class="line" href="unionCommand.html#ab516bde009e6b06c4b342d7f5bf35ece">  197<\/a><\/span>&#160;  <a class="code" href="structSimpleCommand.html">ExitCommand<\/a> <a class="code" href="unionCommand.html#ab516bde009e6b06c4b342d7f5bf35ece">exit<\/a>;       <\/div><div class="line"><a name="l00198"><\/a><span class="lineno"><a class="line" href="unionCommand.html#a062a1645e04deb34460595c902a49c44">  198<\/a><\/span>&#160;  <a class="code" href="structSimpleCommand.html">EOCCommand<\/a> <a class="code" href="unionCommand.html#a062a1645e04deb34460595c902a49c44">eoc<\/a>;         <\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;} <a class="code" href="command_8h.html#a1de7fd3d42753f181e50db581e6a43d9">Command<\/a>;<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<\/div><div class="line"><a name="l00207"><\/a><span class="lineno"><a class="line" href="structCommandHolder.html">  207<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structCommandHolder.html">CommandHolder<\/a> {<\/div><div class="line"><a name="l00208"><\/a><span class="lineno"><a class="line" href="structCommandHolder.html#a3691bd22096644e8c6be327fc7d0d246">  208<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structCommandHolder.html#a3691bd22096644e8c6be327fc7d0d246">redirect_in<\/a>;  <\/div><div class="line"><a name="l00210"><\/a><span class="lineno"><a class="line" href="structCommandHolder.html#ac7bfc3e78a8e8b511e2b324c45a17d6f">  210<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structCommandHolder.html#ac7bfc3e78a8e8b511e2b324c45a17d6f">redirect_out<\/a>; <\/div><div class="line"><a name="l00212"><\/a><span class="lineno"><a class="line" href="structCommandHolder.html#acb381d6ab29bc574dc1ff452adc7847a">  212<\/a><\/span>&#160;  <span class="keywordtype">char<\/span> <a class="code" href="structCommandHolder.html#acb381d6ab29bc574dc1ff452adc7847a">flags<\/a>;         <\/div><div class="line"><a name="l00221"><\/a><span class="lineno"><a class="line" href="structCommandHolder.html#a83a7e82024a6f736ffebed0792aa12a9">  221<\/a><\/span>&#160;  <a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="structCommandHolder.html#a83a7e82024a6f736ffebed0792aa12a9">cmd<\/a>;        <\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;} <a class="code" href="command_8h.html#ab1fd67fd747d8aee5d690bb1bd549d83">CommandHolder<\/a>;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="comment">\/\/ Command structure constructors<\/span><\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<a class="code" href="structCommandHolder.html">CommandHolder<\/a> <a class="code" href="command_8h.html#abd98f4305f003851cd57b9b20c2598fb">mk_command_holder<\/a>(<span class="keywordtype">char<\/span>* redirect_in, <span class="keywordtype">char<\/span>* redirect_out, <span class="keywordtype">char<\/span> flags, <a class="code" href="unionCommand.html">Command<\/a> cmd);<\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#aacc43eef331547248883e982f656059a">mk_generic_command<\/a>(<span class="keywordtype">char<\/span>** args);<\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#afd836ba65886361a666d4b6c40680b32">mk_echo_command<\/a>(<span class="keywordtype">char<\/span>** args);<\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#a284929366e9d674109fec7c9872958d8">mk_export_command<\/a>(<span class="keywordtype">char<\/span>* env_var, <span class="keywordtype">char<\/span>* val);<\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#a054007a0e38b3f58b824e02449ff66b6">mk_cd_command<\/a>(<span class="keywordtype">char<\/span>* dir);<\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<\/div><div class="line"><a name="l00315"><\/a><span class="lineno">  315<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#a33d431b7e34f5f063827109085810eac">mk_kill_command<\/a>(<span class="keywordtype">char<\/span>* sig, <span class="keywordtype">char<\/span>* job);<\/div><div class="line"><a name="l00316"><\/a><span class="lineno">  316<\/span>&#160;<\/div><div class="line"><a name="l00324"><\/a><span class="lineno">  324<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#ab18329e0efa0ff9bff9f41377d85c39d">mk_pwd_command<\/a>();<\/div><div class="line"><a name="l00325"><\/a><span class="lineno">  325<\/span>&#160;<\/div><div class="line"><a name="l00333"><\/a><span class="lineno">  333<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#aa202066429fbb26a13cdd702953562c4">mk_jobs_command<\/a>();<\/div><div class="line"><a name="l00334"><\/a><span class="lineno">  334<\/span>&#160;<\/div><div class="line"><a name="l00342"><\/a><span class="lineno">  342<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#a60697d98410555ac18a86b2f544eea35">mk_exit_command<\/a>();<\/div><div class="line"><a name="l00343"><\/a><span class="lineno">  343<\/span>&#160;<\/div><div class="line"><a name="l00351"><\/a><span class="lineno">  351<\/span>&#160;<a class="code" href="unionCommand.html">Command<\/a> <a class="code" href="command_8h.html#ade4ef9eca0d11eaa7690942a6d99d551">mk_eoc<\/a>();<\/div><div class="line"><a name="l00352"><\/a><span class="lineno">  352<\/span>&#160;<\/div><div class="line"><a name="l00365"><\/a><span class="lineno">  365<\/span>&#160;<a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="command_8h.html#a1708aa65874060aa7ef99bf9e1671f5c">get_command_type<\/a>(<a class="code" href="unionCommand.html">Command<\/a> cmd);<\/div><div class="line"><a name="l00366"><\/a><span class="lineno">  366<\/span>&#160;<\/div><div class="line"><a name="l00380"><\/a><span class="lineno">  380<\/span>&#160;<a class="code" href="command_8h.html#a21e038f5b8958e203d28bc4f18472352">CommandType<\/a> <a class="code" href="command_8h.html#aede59bdfd29950fcbb7ace71cb20ea34">get_command_holder_type<\/a>(<a class="code" href="structCommandHolder.html">CommandHolder<\/a> holder);<\/div><div class="line"><a name="l00381"><\/a><span class="lineno">  381<\/span>&#160;<\/div><div class="line"><a name="l00391"><\/a><span class="lineno">  391<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="command_8h.html#a733982c2f2d2726bf206fc270270b66a">debug_print_script<\/a>(<span class="keyword">const<\/span> <a class="code" href="structCommandHolder.html">CommandHolder<\/a>* holders);<\/div><div class="line"><a name="l00392"><\/a><span class="lineno">  392<\/span>&#160;<\/div><div class="line"><a name="l00393"><\/a><span class="lineno">  393<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="structCDCommand_html_a3696e9b5a96ed447056a4753906277d1"><div class="ttname"><a href="structCDCommand.html#a3696e9b5a96ed447056a4753906277d1">CDCommand::dir<\/a><\/div><div class="ttdeci">char * dir<\/div><div class="ttdef"><b>Definition:<\/b> command.h:133<\/div><\/div>$/;"	a
l00001	doc/html/debug_8h_source.html	/^<a href="debug_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<span class="preprocessor">#ifdef DEBUG<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="preprocessor">#  define PRINT_DEBUG(fmt, ...) \\<\/span><\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;<span class="preprocessor">    fprintf(stderr, &quot;DEBUG: %s(), %s:%d: &quot; fmt,         \\<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;<span class="preprocessor">        __func__, __FILE__, __LINE__, ##__VA_ARGS__)<\/span><\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="preprocessor">#  define IFDEBUG(x) x<\/span><\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="preprocessor">#else<\/span><\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="comment">\/\/ Does nothing<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="debug_8h.html#a035cb3bcb57e0682ea2b55c645e5f9f2">   34<\/a><\/span>&#160;<span class="preprocessor">#  define PRINT_DEBUG(fmt, ...)<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="comment">\/\/ Does nothing<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno"><a class="line" href="debug_8h.html#abcf0d5a50dd7e407cd464c1afbd27554">   36<\/a><\/span>&#160;<span class="preprocessor">#  define IFDEBUG(x)<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><\/div><!-- fragment --><\/div><!-- contents -->$/;"	a
l00001	doc/html/deque_8h_source.html	/^<a href="deque_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#ifndef SRC_DEQUE_H<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#define SRC_DEQUE_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno"><a class="line" href="deque_8h.html#ad1734634a88d702478c08e26e39dc7b8">   33<\/a><\/span>&#160;<span class="preprocessor">#define IMPLEMENT_DEQUE_STRUCT(struct_name, type)                       \\<\/span><\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="preprocessor">  typedef struct struct_name {                                          \\<\/span><\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="preprocessor">    type* data;                                                         \\<\/span><\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<span class="preprocessor">    size_t cap;                                                         \\<\/span><\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<span class="preprocessor">    size_t front;                                                       \\<\/span><\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<span class="preprocessor">    size_t back;                                                        \\<\/span><\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="preprocessor">    void (*destructor)(type);                                           \\<\/span><\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="preprocessor">  } struct_name;<\/span><\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="deque_8h.html#a20e8006e6767304fca356f057bc319f4">   60<\/a><\/span>&#160;<span class="preprocessor">#define PROTOTYPE_DEQUE(struct_name, type)                              \\<\/span><\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<span class="preprocessor">  struct_name new_##struct_name(size_t);                                \\<\/span><\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;<span class="preprocessor">  struct_name new_destructable_##struct_name(size_t, void (*)(type));   \\<\/span><\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<span class="preprocessor">  void destroy_##struct_name(struct_name*);                             \\<\/span><\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="preprocessor">  void empty_##struct_name(struct_name*);                               \\<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="preprocessor">  bool is_empty_##struct_name(struct_name*);                            \\<\/span><\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;<span class="preprocessor">  size_t length_##struct_name(struct_name*);                            \\<\/span><\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;<span class="preprocessor">  type* as_array_##struct_name(struct_name*, size_t*);                  \\<\/span><\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<span class="preprocessor">  void apply_##struct_name(struct_name*, void (*)(type));               \\<\/span><\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;<span class="preprocessor">  void push_front_##struct_name(struct_name*, type);                    \\<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="preprocessor">  void push_back_##struct_name(struct_name*, type);                     \\<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<span class="preprocessor">  type pop_front_##struct_name(struct_name*);                           \\<\/span><\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<span class="preprocessor">  type pop_back_##struct_name(struct_name*);                            \\<\/span><\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<span class="preprocessor">  type peek_front_##struct_name(struct_name*);                          \\<\/span><\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="preprocessor">  type peek_back_##struct_name(struct_name*);                           \\<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">  void update_front_##struct_name(struct_name*, type);                  \\<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">  void update_back_##struct_name(struct_name*, type);<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<\/div><div class="line"><a name="l00091"><\/a><span class="lineno"><a class="line" href="deque_8h.html#a283e81072037376be2a17b25b1eb1601">   91<\/a><\/span>&#160;<span class="preprocessor">#define IMPLEMENT_DEQUE(struct_name, type)                              \\<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">  void apply_##struct_name(struct_name*, void (*)(type));               \\<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">  struct_name new_##struct_name(size_t init_cap) {                      \\<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">    struct_name ret;                                                    \\<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">    if (init_cap &gt; 0)                                                   \\<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">      ret.cap = init_cap;                                               \\<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">    else                                                                \\<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="preprocessor">      ret.cap = 1;                                                      \\<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="preprocessor">    ret.data = (type*) malloc(init_cap * sizeof(type));                 \\<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">    if (ret.data == NULL) {                                             \\<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">      fprintf(stderr, &quot;ERROR: Failed to allocate struct_name&quot;           \\<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">              &quot; contents&quot;);                                             \\<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">      exit(-1);                                                         \\<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">    ret.front = ret.back = 0;                                           \\<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">    ret.destructor = NULL;                                              \\<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">  struct_name new_destructable_##struct_name(size_t init_cap,           \\<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<span class="preprocessor">                                             void (*destructor)(type)){ \\<\/span><\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="preprocessor">    struct_name ret = new_##struct_name(init_cap);                      \\<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">    ret.destructor = destructor;                                        \\<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">  void destroy_##struct_name(struct_name* deq) {                        \\<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">    if (deq-&gt;data == NULL)                                              \\<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">      return;                                                           \\<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">    if (deq-&gt;destructor != NULL)                                        \\<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">      apply_##struct_name(deq, deq-&gt;destructor);                        \\<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">    if (deq-&gt;data != NULL)                                              \\<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">      free(deq-&gt;data);                                                  \\<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="preprocessor">    deq-&gt;data = NULL;                                                   \\<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="preprocessor">    deq-&gt;cap = deq-&gt;front = deq-&gt;back = 0;                              \\<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">  void empty_##struct_name(struct_name* deq) {                          \\<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">    if (deq-&gt;destructor != NULL)                                        \\<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">      apply_##struct_name(deq, deq-&gt;destructor);                        \\<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">    deq-&gt;front = deq-&gt;back = 0;                                         \\<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">  bool is_empty_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">    return deq-&gt;front == deq-&gt;back;                                     \\<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">  size_t length_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="preprocessor">    return (deq-&gt;back - deq-&gt;front + deq-&gt;cap) % deq-&gt;cap;              \\<\/span><\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="preprocessor">  static void __reallign_##struct_name(struct_name* deq) {              \\<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">    if (deq-&gt;front != 0) {                                              \\<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor">      type* old_data = deq-&gt;data;                                       \\<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">      size_t len = length_##struct_name(deq);                           \\<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">      deq-&gt;data = (type*) malloc(deq-&gt;cap * sizeof(type));              \\<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<span class="preprocessor">      if (deq-&gt;data == NULL) {                                          \\<\/span><\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<span class="preprocessor">        fprintf(stderr, &quot;ERROR: Failed to reallocate struct_name&quot;       \\<\/span><\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor">                &quot; contents&quot;);                                           \\<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">        abort();                                                        \\<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor">      }                                                                 \\<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor">      size_t i;                                                         \\<\/span><\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="preprocessor">      for (i = 0; i &lt; len; ++i)                                         \\<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="preprocessor">        deq-&gt;data[i] = old_data[(deq-&gt;front + i) % deq-&gt;cap];           \\<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">      free(old_data);                                                   \\<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<span class="preprocessor">      deq-&gt;front = 0;                                                   \\<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="preprocessor">      deq-&gt;back = i;                                                    \\<\/span><\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="preprocessor">  type* as_array_##struct_name(struct_name* deq, size_t* len) {         \\<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">    __reallign_##struct_name(deq);                                      \\<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor">    type* ret = deq-&gt;data;                                              \\<\/span><\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;<span class="preprocessor">    if (len != NULL)                                                    \\<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<span class="preprocessor">      *len = length_##struct_name(deq);                                 \\<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<span class="preprocessor">    deq-&gt;data = NULL;                                                   \\<\/span><\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<span class="preprocessor">    deq-&gt;cap = deq-&gt;front = deq-&gt;back = 0;                              \\<\/span><\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<span class="preprocessor">  void apply_##struct_name(struct_name* deq, void (*func)(type)) {      \\<\/span><\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="preprocessor">    size_t len = length_##struct_name(deq);                             \\<\/span><\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<span class="preprocessor">    for (size_t i = 0; i &lt; len; ++i) {                                  \\<\/span><\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<span class="preprocessor">      func(deq-&gt;data[(deq-&gt;front + i) % deq-&gt;cap]);                     \\<\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<span class="preprocessor">  static void __on_push_##struct_name(struct_name* deq) {               \\<\/span><\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<span class="preprocessor">    if (deq-&gt;front == (deq-&gt;back + 1) % deq-&gt;cap) {                     \\<\/span><\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<span class="preprocessor">      type* old_data = deq-&gt;data;                                       \\<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<span class="preprocessor">      size_t old_cap = deq-&gt;cap;                                        \\<\/span><\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<span class="preprocessor">      deq-&gt;cap = 2 * deq-&gt;cap;                                          \\<\/span><\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="preprocessor">      deq-&gt;data = (type*) malloc(deq-&gt;cap * sizeof(type));              \\<\/span><\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<span class="preprocessor">      if (deq-&gt;data == NULL) {                                          \\<\/span><\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="preprocessor">        fprintf(stderr, &quot;ERROR: Failed to reallocate struct_name&quot;       \\<\/span><\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="preprocessor">                &quot; contents\\n&quot;);                                         \\<\/span><\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<span class="preprocessor">        abort();                                                        \\<\/span><\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="preprocessor">      }                                                                 \\<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="preprocessor">      size_t i;                                                         \\<\/span><\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<span class="preprocessor">      for (i = 0; i &lt; old_cap - 1; ++i)                                 \\<\/span><\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<span class="preprocessor">        deq-&gt;data[i] = old_data[(deq-&gt;front + i) % old_cap];            \\<\/span><\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="preprocessor">      free(old_data);                                                   \\<\/span><\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="preprocessor">      deq-&gt;front = 0;                                                   \\<\/span><\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<span class="preprocessor">      deq-&gt;back = i;                                                    \\<\/span><\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<span class="preprocessor">  static void __on_pop_##struct_name(struct_name* deq) {                \\<\/span><\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<span class="preprocessor">    if (is_empty_##struct_name(deq)) {                                  \\<\/span><\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<span class="preprocessor">      fprintf(stderr, &quot;ERROR: Cannot pop from of struct_name while it &quot; \\<\/span><\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="preprocessor">              &quot;is empty\\n&quot;);                                            \\<\/span><\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<span class="preprocessor">      abort();                                                          \\<\/span><\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<span class="preprocessor">  void push_front_##struct_name(struct_name* deq, type element) {       \\<\/span><\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="preprocessor">    __on_push_##struct_name(deq);                                       \\<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="preprocessor">    deq-&gt;front = (deq-&gt;front + deq-&gt;cap - 1) % deq-&gt;cap;                \\<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;front] = element;                                    \\<\/span><\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<span class="preprocessor">  void push_back_##struct_name(struct_name* deq, type element) {        \\<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<span class="preprocessor">    __on_push_##struct_name(deq);                                       \\<\/span><\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;back] = element;                                     \\<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="preprocessor">    deq-&gt;back = (deq-&gt;back + 1) % deq-&gt;cap;                             \\<\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<span class="preprocessor">  type pop_front_##struct_name(struct_name* deq) {                      \\<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="preprocessor">    __on_pop_##struct_name(deq);                                        \\<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="preprocessor">    size_t old_front = deq-&gt;front;                                      \\<\/span><\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<span class="preprocessor">    deq-&gt;front = (deq-&gt;front + 1) % deq-&gt;cap;                           \\<\/span><\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[old_front];                                        \\<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<span class="preprocessor">  type pop_back_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<span class="preprocessor">    __on_pop_##struct_name(deq);                                        \\<\/span><\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<span class="preprocessor">    deq-&gt;back = (deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap;                  \\<\/span><\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[deq-&gt;back];                                        \\<\/span><\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<span class="preprocessor">  type peek_front_##struct_name(struct_name* deq) {                     \\<\/span><\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[deq-&gt;front];                                       \\<\/span><\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00291"><\/a><span class="lineno">  291<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00292"><\/a><span class="lineno">  292<\/span>&#160;<span class="preprocessor">  type peek_back_##struct_name(struct_name* deq) {                      \\<\/span><\/div><div class="line"><a name="l00293"><\/a><span class="lineno">  293<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00295"><\/a><span class="lineno">  295<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00296"><\/a><span class="lineno">  296<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[(deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap];            \\<\/span><\/div><div class="line"><a name="l00297"><\/a><span class="lineno">  297<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00298"><\/a><span class="lineno">  298<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00299"><\/a><span class="lineno">  299<\/span>&#160;<span class="preprocessor">  void update_front_##struct_name(struct_name* deq, type element) {     \\<\/span><\/div><div class="line"><a name="l00300"><\/a><span class="lineno">  300<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00303"><\/a><span class="lineno">  303<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;front] = element;                                    \\<\/span><\/div><div class="line"><a name="l00304"><\/a><span class="lineno">  304<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00305"><\/a><span class="lineno">  305<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00306"><\/a><span class="lineno">  306<\/span>&#160;<span class="preprocessor">  void update_back_##struct_name(struct_name* deq, type element) {      \\<\/span><\/div><div class="line"><a name="l00307"><\/a><span class="lineno">  307<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00308"><\/a><span class="lineno">  308<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00309"><\/a><span class="lineno">  309<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00310"><\/a><span class="lineno">  310<\/span>&#160;<span class="preprocessor">    deq-&gt;data[(deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap] = element;         \\<\/span><\/div><div class="line"><a name="l00311"><\/a><span class="lineno">  311<\/span>&#160;<span class="preprocessor">  }<\/span><\/div><div class="line"><a name="l00312"><\/a><span class="lineno">  312<\/span>&#160;<\/div><div class="line"><a name="l00313"><\/a><span class="lineno">  313<\/span>&#160;<span class="comment">\/\/ The following deque is for example and documentation purposes only<\/span><\/div><div class="line"><a name="l00314"><\/a><span class="lineno">  314<\/span>&#160;<\/div><div class="line"><a name="l00316"><\/a><span class="lineno"><a class="line" href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">  316<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keywordtype">char<\/span> <a class="code" href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">Type<\/a>;<\/div><div class="line"><a name="l00317"><\/a><span class="lineno">  317<\/span>&#160;<\/div><div class="line"><a name="l00330"><\/a><span class="lineno">  330<\/span>&#160;<span class="comment">\/\/ The following is the struct created by the expansion of<\/span><\/div><div class="line"><a name="l00331"><\/a><span class="lineno">  331<\/span>&#160;<span class="comment">\/\/ IMPLEMENT_DEQUE_STRUCT(Example, Type);<\/span><\/div><div class="line"><a name="l00332"><\/a><span class="lineno"><a class="line" href="structExample.html">  332<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structExample.html">Example<\/a> {<\/div><div class="line"><a name="l00333"><\/a><span class="lineno"><a class="line" href="structExample.html#aff9c97770bf4afc778ac2fc0c693d3b0">  333<\/a><\/span>&#160;  <a class="code" href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">Type<\/a>* <a class="code" href="structExample.html#aff9c97770bf4afc778ac2fc0c693d3b0">data<\/a>;   <\/div><div class="line"><a name="l00334"><\/a><span class="lineno"><a class="line" href="structExample.html#a42fd483a97081133af34019cfb99c875">  334<\/a><\/span>&#160;  <span class="keywordtype">size_t<\/span> <a class="code" href="structExample.html#a42fd483a97081133af34019cfb99c875">cap<\/a>;   <\/div><div class="line"><a name="l00335"><\/a><span class="lineno"><a class="line" href="structExample.html#ad28f26e5c53b98255d98b65e82fae766">  335<\/a><\/span>&#160;  <span class="keywordtype">size_t<\/span> <a class="code" href="structExample.html#ad28f26e5c53b98255d98b65e82fae766">front<\/a>; <\/div><div class="line"><a name="l00336"><\/a><span class="lineno"><a class="line" href="structExample.html#ab52696b8c662a542dccff1fabda7de00">  336<\/a><\/span>&#160;  <span class="keywordtype">size_t<\/span> <a class="code" href="structExample.html#ab52696b8c662a542dccff1fabda7de00">back<\/a>;  <\/div><div class="line"><a name="l00338"><\/a><span class="lineno"><a class="line" href="structExample.html#ae42fbec90128c56bc0c81d06cc17acd3">  338<\/a><\/span>&#160;  void (*<a class="code" href="structExample.html#ae42fbec90128c56bc0c81d06cc17acd3">destructor<\/a>)(<a class="code" href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">Type<\/a>); <\/div><div class="line"><a name="l00346"><\/a><span class="lineno">  346<\/span>&#160;} <a class="code" href="deque_8h.html#a9edabca2136ac70aa219f7777fdafe9f">Example<\/a>; <\/div><div class="line"><a name="l00545"><\/a><span class="lineno">  545<\/span>&#160;<a class="code" href="deque_8h.html#a20e8006e6767304fca356f057bc319f4">PROTOTYPE_DEQUE<\/a>(<a class="code" href="structExample.html">Example<\/a>, <a class="code" href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">Type<\/a>);<\/div><div class="line"><a name="l00546"><\/a><span class="lineno">  546<\/span>&#160;<\/div><div class="line"><a name="l00547"><\/a><span class="lineno">  547<\/span>&#160;<span class="preprocessor">#endif \/\/SRC_DEQUE_H<\/span><\/div><div class="ttc" id="deque_8h_html_ac9c83c2070eb6b5891cf742b90f54c68"><div class="ttname"><a href="deque_8h.html#ac9c83c2070eb6b5891cf742b90f54c68">Type<\/a><\/div><div class="ttdeci">char Type<\/div><div class="ttdoc">An example type used for example purposes only. <\/div><div class="ttdef"><b>Definition:<\/b> deque.h:316<\/div><\/div>$/;"	a
l00001	doc/html/execute_8h_source.html	/^<a href="execute_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#ifndef SRC_EXECUTE_H<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#define SRC_EXECUTE_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* <a class="code" href="execute_8h.html#afeab372587374ba444aa9bdfb6cfa0d8">lookup_env<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* env_var);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#afa91981c1edd7bb1c86292d80b27e170">write_env<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* env_var, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* val);<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keywordtype">char<\/span>* <a class="code" href="execute_8h.html#acd83b7572960ddecb86a6f96d82fa040">get_current_directory<\/a>(<span class="keywordtype">bool<\/span>* should_free);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a3a843950dd6e83519c8a1a7ad8d8d827">check_jobs_bg_status<\/a>();<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a0b272e2a39868632c7cdf1f66abca817">print_job<\/a>(<span class="keywordtype">int<\/span> job_id, pid_t pid, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* cmd);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#ae6dddf9eadf2166be12825dd40dbd644">print_job_bg_start<\/a>(<span class="keywordtype">int<\/span> job_id, pid_t pid, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* cmd);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a9fbab67c786201a8f3266661bd0917c5">print_job_bg_complete<\/a>(<span class="keywordtype">int<\/span> job_id, pid_t pid, <span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* cmd);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#ab7cc05f9004354092c64727e7ab9546b">run_generic<\/a>(<a class="code" href="structGenericCommand.html">GenericCommand<\/a> cmd);<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a550f8e50935c3911e6926f14e27ba2eb">run_echo<\/a>(<a class="code" href="structGenericCommand.html">EchoCommand<\/a> cmd);<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#af5fe54ac25f6dbb4e5a7bb7cde156413">run_export<\/a>(<a class="code" href="structExportCommand.html">ExportCommand<\/a> cmd);<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a8e9aed155e5ccf7e207a8f3ce4789d83">run_cd<\/a>(<a class="code" href="structCDCommand.html">CDCommand<\/a> cmd);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a2b6a997c9f75fd29fd6e103498ceaaec">run_kill<\/a>(<a class="code" href="structKillCommand.html">KillCommand<\/a> cmd);<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a934397f142ab2b63f69628a9db231bac">run_pwd<\/a>();<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#ae954ca554a8f66899f270560d68ec012">run_jobs<\/a>();<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="execute_8h.html#a4dab67459028f3b5a60d1a3695933f4b">run_script<\/a>(<a class="code" href="structCommandHolder.html">CommandHolder<\/a>* holders);<\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="execute_8h_html_a8e9aed155e5ccf7e207a8f3ce4789d83"><div class="ttname"><a href="execute_8h.html#a8e9aed155e5ccf7e207a8f3ce4789d83">run_cd<\/a><\/div><div class="ttdeci">void run_cd(CDCommand cmd)<\/div><div class="ttdoc">Run the builtin cd (change directory) command. <\/div><div class="ttdef"><b>Definition:<\/b> execute.c:139<\/div><\/div>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[BASH]$ .\/quash<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Welcome...<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ exit<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[BASH]$ .\/quash<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;Welcome...<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ quit<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[BASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ cat src\/quash.c | grep running<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/\/ Check if loop is running<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;bool is_running() {<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;  return state.running;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;  state.running = false;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;  while (is_running()) {<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ cat src\/quash.c | grep running | grep return<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;  return state.running;<\/div><\/div><!-- fragment --><h3>Built-in Functions<\/h3>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ cd ..              # Go up one directory<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;\/home<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ cd $HOME           # Go to path in the HOME environment variable<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo Hello Quash! &gt; a.txt  # Write &quot;Hello Quash!\\n&quot; to a file<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;[QUASH]$ cat a.txt<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;Hello Quash!<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo Hey Quash! &gt; a.txt  # Truncate the previous contents of a.txt and write &quot;Hey Quash!\\n&quot; to the file<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ cat a.txt          # Print file contents. If we didn&#39;t actually truncate we would see &quot;Hey Quash!h!\\n&quot; as the output of this command.<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ cat &lt; a.txt        # Make cat read from a.txt via standard in<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;[QUASH]$ cat &lt; a.txt &gt; b.txt  # Multiple redirect. Read from a.txt and write to b.txt.<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;[QUASH]$ cat b.txt<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;[QUASH]$ cat a.txt &gt;&gt; b.txt  # Append output of a.txt to b.txt<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;[QUASH]$ cat b.txt<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo Hello world! &#39;How are you today?&#39;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Hello world! How are you today?<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ echo $HOME\/Development<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/home\/jrobinson\/Development<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ export PATH=\/usr\/bin:\/bin  # Set the PATH environment variable<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;[QUASH]$ echo $PATH                 # Print the current value of PATH<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;\/usr\/bin:\/bin<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo $HOME<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ export PATH=$HOME  # Set the PATH environment variable to the value of HOME<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ echo $PATH         # Print the current value of PATH<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ find -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Background job started: [1]    2342    find \/ -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ sleep 15 &amp;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;Background job started: [2]    2343    sleep 15 &amp;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ jobs               # List currently running background jobs<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[1]    2342    find \/ -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[2]    2343    sleep 15 &amp;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><h2>Useful Functions in the Quash Skeleton<\/h2>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ program1 &amp;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Background job started: [1]    2342    program1 &amp;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ ls<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;Documents Downloads<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;Completed: [1]    2342    program1 &amp;<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/index.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ pwd                # Print the working directory<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ echo $PWD          # Print the PWD environment variable<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ export PWD=\/usr    # Change the PWD environment variable<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ pwd<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;\/usr<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	doc/html/memory__pool_8h_source.html	/^<a href="memory__pool_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;<span class="preprocessor">#ifndef SRC_PARSING_MEMORY_POOL_H<\/span><\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<span class="preprocessor">#define SRC_PARSING_MEMORY_POOL_H<\/span><\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span><\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="deque_8h.html">deque.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="memory__pool_8h.html#a1ad04a8d891de237fc5d91191c569777">initialize_memory_pool<\/a>(<span class="keywordtype">size_t<\/span> size);<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keywordtype">void<\/span>* <a class="code" href="memory__pool_8h.html#a609473bc6afff33d360a8e0c8935812e">memory_pool_alloc<\/a>(<span class="keywordtype">size_t<\/span> size);<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="memory__pool_8h.html#a2a8f807565226a955c94a2c4670ba65f">destroy_memory_pool<\/a>();<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;<span class="keywordtype">char<\/span>* <a class="code" href="memory__pool_8h.html#a7d92ccd7e51eb71624f07b4e917869aa">memory_pool_strdup<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* str);<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno"><a class="line" href="memory__pool_8h.html#a1856c82f260a610e5036434162f5bcb0">   74<\/a><\/span>&#160;<span class="preprocessor">#define IMPLEMENT_DEQUE_MEMORY_POOL(struct_name, type)                  \\<\/span><\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;<span class="preprocessor">  void apply_##struct_name(struct_name*, void (*)(type));               \\<\/span><\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;<span class="preprocessor">  struct_name new_##struct_name(size_t init_cap) {                      \\<\/span><\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;<span class="preprocessor">    struct_name ret;                                                    \\<\/span><\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="preprocessor">    if (init_cap &gt; 0)                                                   \\<\/span><\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="preprocessor">      ret.cap = init_cap;                                               \\<\/span><\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="preprocessor">    else                                                                \\<\/span><\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<span class="preprocessor">      ret.cap = 1;                                                      \\<\/span><\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="preprocessor">    ret.data = (type*) memory_pool_alloc(init_cap * sizeof(type));      \\<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="preprocessor">    if (ret.data == NULL) {                                             \\<\/span><\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<span class="preprocessor">      fprintf(stderr, &quot;ERROR: Failed to reallocate struct_name&quot;         \\<\/span><\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<span class="preprocessor">              &quot; contents&quot;);                                             \\<\/span><\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<span class="preprocessor">      abort();                                                          \\<\/span><\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<span class="preprocessor">    ret.front = ret.back = 0;                                           \\<\/span><\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="preprocessor">    ret.destructor = NULL;                                              \\<\/span><\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<span class="preprocessor">  struct_name new_destructable_##struct_name(size_t init_cap,           \\<\/span><\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<span class="preprocessor">                                             void (*destructor)(type)){ \\<\/span><\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="preprocessor">    struct_name ret = new_##struct_name(init_cap);                      \\<\/span><\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<span class="preprocessor">    ret.destructor = destructor;                                        \\<\/span><\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">  void destroy_##struct_name(struct_name* deq) {                        \\<\/span><\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<span class="preprocessor">    if (deq-&gt;data == NULL)                                              \\<\/span><\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;<span class="preprocessor">      return;                                                           \\<\/span><\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;<span class="preprocessor">    if (deq-&gt;destructor != NULL)                                        \\<\/span><\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;<span class="preprocessor">      apply_##struct_name(deq, deq-&gt;destructor);                        \\<\/span><\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="preprocessor">    deq-&gt;data = NULL;                                                   \\<\/span><\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;<span class="preprocessor">    deq-&gt;cap = 0;                                                       \\<\/span><\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;<span class="preprocessor">    deq-&gt;front = deq-&gt;back = 0;                                         \\<\/span><\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;<span class="preprocessor">  void empty_##struct_name(struct_name* deq) {                          \\<\/span><\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;<span class="preprocessor">    if (deq-&gt;destructor != NULL)                                        \\<\/span><\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;<span class="preprocessor">      apply_##struct_name(deq, deq-&gt;destructor);                        \\<\/span><\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;<span class="preprocessor">    deq-&gt;front = deq-&gt;back = 0;                                         \\<\/span><\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;<span class="preprocessor">  bool is_empty_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<span class="preprocessor">    return deq-&gt;front == deq-&gt;back;                                     \\<\/span><\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;<span class="preprocessor">  size_t length_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;<span class="preprocessor">    return (deq-&gt;back - deq-&gt;front + deq-&gt;cap) % deq-&gt;cap;              \\<\/span><\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;<span class="preprocessor">  static void __reallign_##struct_name(struct_name* deq) {              \\<\/span><\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;<span class="preprocessor">    if (deq-&gt;front != 0) {                                              \\<\/span><\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;<span class="preprocessor">      type* old_data = deq-&gt;data;                                       \\<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<span class="preprocessor">      size_t len = length_##struct_name(deq);                           \\<\/span><\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;<span class="preprocessor">      deq-&gt;data = (type*) memory_pool_alloc(deq-&gt;cap * sizeof(type));   \\<\/span><\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;<span class="preprocessor">      if (deq-&gt;data == NULL) {                                          \\<\/span><\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;<span class="preprocessor">        fprintf(stderr, &quot;ERROR: Failed to reallocate struct_name&quot;       \\<\/span><\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;<span class="preprocessor">                &quot; contents&quot;);                                           \\<\/span><\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;<span class="preprocessor">        abort();                                                        \\<\/span><\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;<span class="preprocessor">      }                                                                 \\<\/span><\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;<span class="preprocessor">      size_t i;                                                         \\<\/span><\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">      for (i = 0; i &lt; len; ++i)                                         \\<\/span><\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;<span class="preprocessor">        deq-&gt;data[i] = old_data[(deq-&gt;front + i) % deq-&gt;cap];           \\<\/span><\/div><div class="line"><a name="l00163"><\/a><span class="lineno">  163<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00164"><\/a><span class="lineno">  164<\/span>&#160;<span class="preprocessor">      deq-&gt;front = 0;                                                   \\<\/span><\/div><div class="line"><a name="l00165"><\/a><span class="lineno">  165<\/span>&#160;<span class="preprocessor">      deq-&gt;back = i;                                                    \\<\/span><\/div><div class="line"><a name="l00166"><\/a><span class="lineno">  166<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00167"><\/a><span class="lineno">  167<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00168"><\/a><span class="lineno">  168<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00169"><\/a><span class="lineno">  169<\/span>&#160;<span class="preprocessor">  type* as_array_##struct_name(struct_name* deq, size_t* len) {         \\<\/span><\/div><div class="line"><a name="l00170"><\/a><span class="lineno">  170<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00171"><\/a><span class="lineno">  171<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00173"><\/a><span class="lineno">  173<\/span>&#160;<span class="preprocessor">    __reallign_##struct_name(deq);                                      \\<\/span><\/div><div class="line"><a name="l00174"><\/a><span class="lineno">  174<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00175"><\/a><span class="lineno">  175<\/span>&#160;<span class="preprocessor">    type* ret = deq-&gt;data;                                              \\<\/span><\/div><div class="line"><a name="l00176"><\/a><span class="lineno">  176<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00177"><\/a><span class="lineno">  177<\/span>&#160;<span class="preprocessor">    if (len != NULL)                                                    \\<\/span><\/div><div class="line"><a name="l00178"><\/a><span class="lineno">  178<\/span>&#160;<span class="preprocessor">      *len = length_##struct_name(deq);                                 \\<\/span><\/div><div class="line"><a name="l00179"><\/a><span class="lineno">  179<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00180"><\/a><span class="lineno">  180<\/span>&#160;<span class="preprocessor">    deq-&gt;data = NULL;                                                   \\<\/span><\/div><div class="line"><a name="l00181"><\/a><span class="lineno">  181<\/span>&#160;<span class="preprocessor">    deq-&gt;cap = deq-&gt;front = deq-&gt;back = 0;                              \\<\/span><\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00183"><\/a><span class="lineno">  183<\/span>&#160;<span class="preprocessor">    return ret;                                                         \\<\/span><\/div><div class="line"><a name="l00184"><\/a><span class="lineno">  184<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00185"><\/a><span class="lineno">  185<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;<span class="preprocessor">  void apply_##struct_name(struct_name* deq, void (*func)(type)) {      \\<\/span><\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;<span class="preprocessor">    size_t len = length_##struct_name(deq);                             \\<\/span><\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;<span class="preprocessor">    for (size_t i = 0; i &lt; len; ++i) {                                  \\<\/span><\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;<span class="preprocessor">      func(deq-&gt;data[(deq-&gt;front + i) % deq-&gt;cap]);                     \\<\/span><\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;<span class="preprocessor">  static void __on_push_##struct_name(struct_name* deq) {               \\<\/span><\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;<span class="preprocessor">    if (deq-&gt;front == (deq-&gt;back + 1) % deq-&gt;cap) {                     \\<\/span><\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;<span class="preprocessor">      type* old_data = deq-&gt;data;                                       \\<\/span><\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;<span class="preprocessor">      size_t old_cap = deq-&gt;cap;                                        \\<\/span><\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;<span class="preprocessor">      deq-&gt;cap = 2 * deq-&gt;cap;                                          \\<\/span><\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;<span class="preprocessor">      deq-&gt;data = (type*) memory_pool_alloc(deq-&gt;cap * sizeof(type));   \\<\/span><\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;<span class="preprocessor">      if (deq-&gt;data == NULL) {                                          \\<\/span><\/div><div class="line"><a name="l00206"><\/a><span class="lineno">  206<\/span>&#160;<span class="preprocessor">        fprintf(stderr, &quot;ERROR: Failed to reallocate struct_name&quot;       \\<\/span><\/div><div class="line"><a name="l00207"><\/a><span class="lineno">  207<\/span>&#160;<span class="preprocessor">                &quot; contents\\n&quot;);                                         \\<\/span><\/div><div class="line"><a name="l00208"><\/a><span class="lineno">  208<\/span>&#160;<span class="preprocessor">        abort();                                                        \\<\/span><\/div><div class="line"><a name="l00209"><\/a><span class="lineno">  209<\/span>&#160;<span class="preprocessor">      }                                                                 \\<\/span><\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;<span class="preprocessor">      size_t i;                                                         \\<\/span><\/div><div class="line"><a name="l00212"><\/a><span class="lineno">  212<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00213"><\/a><span class="lineno">  213<\/span>&#160;<span class="preprocessor">      for (i = 0; i &lt; old_cap - 1; ++i)                                 \\<\/span><\/div><div class="line"><a name="l00214"><\/a><span class="lineno">  214<\/span>&#160;<span class="preprocessor">        deq-&gt;data[i] = old_data[(deq-&gt;front + i) % old_cap];            \\<\/span><\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;<span class="preprocessor">      deq-&gt;front = 0;                                                   \\<\/span><\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;<span class="preprocessor">      deq-&gt;back = i;                                                    \\<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;<span class="preprocessor">  static void __on_pop_##struct_name(struct_name* deq) {                \\<\/span><\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;<span class="preprocessor">    if (is_empty_##struct_name(deq)) {                                  \\<\/span><\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;<span class="preprocessor">      fprintf(stderr, &quot;ERROR: Cannot pop from of struct_name while it &quot; \\<\/span><\/div><div class="line"><a name="l00224"><\/a><span class="lineno">  224<\/span>&#160;<span class="preprocessor">              &quot;is empty\\n&quot;);                                            \\<\/span><\/div><div class="line"><a name="l00225"><\/a><span class="lineno">  225<\/span>&#160;<span class="preprocessor">      abort();                                                          \\<\/span><\/div><div class="line"><a name="l00226"><\/a><span class="lineno">  226<\/span>&#160;<span class="preprocessor">    }                                                                   \\<\/span><\/div><div class="line"><a name="l00227"><\/a><span class="lineno">  227<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;<span class="preprocessor">  void push_front_##struct_name(struct_name* deq, type element) {       \\<\/span><\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00232"><\/a><span class="lineno">  232<\/span>&#160;<span class="preprocessor">    __on_push_##struct_name(deq);                                       \\<\/span><\/div><div class="line"><a name="l00233"><\/a><span class="lineno">  233<\/span>&#160;<span class="preprocessor">    deq-&gt;front = (deq-&gt;front + deq-&gt;cap - 1) % deq-&gt;cap;                \\<\/span><\/div><div class="line"><a name="l00234"><\/a><span class="lineno">  234<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;front] = element;                                    \\<\/span><\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00237"><\/a><span class="lineno">  237<\/span>&#160;<span class="preprocessor">  void push_back_##struct_name(struct_name* deq, type element) {        \\<\/span><\/div><div class="line"><a name="l00238"><\/a><span class="lineno">  238<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00239"><\/a><span class="lineno">  239<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;<span class="preprocessor">    __on_push_##struct_name(deq);                                       \\<\/span><\/div><div class="line"><a name="l00241"><\/a><span class="lineno">  241<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;back] = element;                                     \\<\/span><\/div><div class="line"><a name="l00242"><\/a><span class="lineno">  242<\/span>&#160;<span class="preprocessor">    deq-&gt;back = (deq-&gt;back + 1) % deq-&gt;cap;                             \\<\/span><\/div><div class="line"><a name="l00243"><\/a><span class="lineno">  243<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00245"><\/a><span class="lineno">  245<\/span>&#160;<span class="preprocessor">  type pop_front_##struct_name(struct_name* deq) {                      \\<\/span><\/div><div class="line"><a name="l00246"><\/a><span class="lineno">  246<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00247"><\/a><span class="lineno">  247<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;<span class="preprocessor">    __on_pop_##struct_name(deq);                                        \\<\/span><\/div><div class="line"><a name="l00249"><\/a><span class="lineno">  249<\/span>&#160;<span class="preprocessor">    size_t old_front = deq-&gt;front;                                      \\<\/span><\/div><div class="line"><a name="l00250"><\/a><span class="lineno">  250<\/span>&#160;<span class="preprocessor">    deq-&gt;front = (deq-&gt;front + 1) % deq-&gt;cap;                           \\<\/span><\/div><div class="line"><a name="l00251"><\/a><span class="lineno">  251<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[old_front];                                        \\<\/span><\/div><div class="line"><a name="l00252"><\/a><span class="lineno">  252<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00254"><\/a><span class="lineno">  254<\/span>&#160;<span class="preprocessor">  type pop_back_##struct_name(struct_name* deq) {                       \\<\/span><\/div><div class="line"><a name="l00255"><\/a><span class="lineno">  255<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00256"><\/a><span class="lineno">  256<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;<span class="preprocessor">    __on_pop_##struct_name(deq);                                        \\<\/span><\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;<span class="preprocessor">    deq-&gt;back = (deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap;                  \\<\/span><\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[deq-&gt;back];                                        \\<\/span><\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;<span class="preprocessor">  type peek_front_##struct_name(struct_name* deq) {                     \\<\/span><\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00264"><\/a><span class="lineno">  264<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00265"><\/a><span class="lineno">  265<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00266"><\/a><span class="lineno">  266<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[deq-&gt;front];                                       \\<\/span><\/div><div class="line"><a name="l00267"><\/a><span class="lineno">  267<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00268"><\/a><span class="lineno">  268<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00269"><\/a><span class="lineno">  269<\/span>&#160;<span class="preprocessor">  type peek_back_##struct_name(struct_name* deq) {                      \\<\/span><\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<span class="preprocessor">    return deq-&gt;data[(deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap];            \\<\/span><\/div><div class="line"><a name="l00274"><\/a><span class="lineno">  274<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00275"><\/a><span class="lineno">  275<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00276"><\/a><span class="lineno">  276<\/span>&#160;<span class="preprocessor">  void update_front_##struct_name(struct_name* deq, type element) {     \\<\/span><\/div><div class="line"><a name="l00277"><\/a><span class="lineno">  277<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00278"><\/a><span class="lineno">  278<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00279"><\/a><span class="lineno">  279<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<span class="preprocessor">    deq-&gt;data[deq-&gt;front] = element;                                    \\<\/span><\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<span class="preprocessor">  }                                                                     \\<\/span><\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="preprocessor">                                                                        \\<\/span><\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<span class="preprocessor">  void update_back_##struct_name(struct_name* deq, type element) {      \\<\/span><\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<span class="preprocessor">    assert(deq != NULL);                                                \\<\/span><\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;<span class="preprocessor">    assert(deq-&gt;data != NULL); <\/span><span class="comment">\/* Make sure the structure is valid *\/<\/span><span class="preprocessor">   \\<\/span><\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;<span class="preprocessor">    assert(!is_empty_##struct_name(deq));                               \\<\/span><\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;<span class="preprocessor">    deq-&gt;data[(deq-&gt;back + deq-&gt;cap - 1) % deq-&gt;cap] = element;         \\<\/span><\/div><div class="line"><a name="l00288"><\/a><span class="lineno">  288<\/span>&#160;<span class="preprocessor">  }<\/span><\/div><div class="line"><a name="l00289"><\/a><span class="lineno">  289<\/span>&#160;<\/div><div class="line"><a name="l00290"><\/a><span class="lineno">  290<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="memory__pool_8h_html_a1ad04a8d891de237fc5d91191c569777"><div class="ttname"><a href="memory__pool_8h.html#a1ad04a8d891de237fc5d91191c569777">initialize_memory_pool<\/a><\/div><div class="ttdeci">void initialize_memory_pool(size_t size)<\/div><div class="ttdoc">Allocate the memory pool. <\/div><div class="ttdef"><b>Definition:<\/b> memory_pool.c:81<\/div><\/div>$/;"	a
l00001	doc/html/parsing__interface_8h_source.html	/^<a href="parsing__interface_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#ifndef SRC_PARSING_PARSING_INTERFACE_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#define SRC_PARSING_PARSING_INTERFACE_H<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="command_8h.html">command.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="deque_8h.html">deque.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="quash_8h.html">quash.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="structRedirect.html">   21<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structRedirect.html">Redirect<\/a> {<\/div><div class="line"><a name="l00022"><\/a><span class="lineno"><a class="line" href="structRedirect.html#ab0e76f7e58a26d52216c8c4bfc9c2e83">   22<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structRedirect.html#ab0e76f7e58a26d52216c8c4bfc9c2e83">in<\/a>;    <\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="structRedirect.html#a9d5efc0a96275e13eba0e71450771952">   23<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structRedirect.html#a9d5efc0a96275e13eba0e71450771952">out<\/a>;   <\/div><div class="line"><a name="l00024"><\/a><span class="lineno"><a class="line" href="structRedirect.html#aea1d3bd9c3b6e1dbf1661b616df9818e">   24<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="structRedirect.html#aea1d3bd9c3b6e1dbf1661b616df9818e">append<\/a>; <\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;} <a class="code" href="parsing__interface_8h.html#a67fb1576f7860fc183192b57b79f91ce">Redirect<\/a>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;<a class="code" href="deque_8h.html#ad1734634a88d702478c08e26e39dc7b8">IMPLEMENT_DEQUE_STRUCT<\/a>(CmdStrs, <span class="keywordtype">char<\/span>*);<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<a class="code" href="deque_8h.html#ad1734634a88d702478c08e26e39dc7b8">IMPLEMENT_DEQUE_STRUCT<\/a>(Cmds, <a class="code" href="structCommandHolder.html">CommandHolder<\/a>);<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<a class="code" href="deque_8h.html#a20e8006e6767304fca356f057bc319f4">PROTOTYPE_DEQUE<\/a>(CmdStrs, <span class="keywordtype">char<\/span>*);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<a class="code" href="deque_8h.html#a20e8006e6767304fca356f057bc319f4">PROTOTYPE_DEQUE<\/a>(Cmds, <a class="code" href="structCommandHolder.html">CommandHolder<\/a>);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;<span class="comment">\/*************************************************************<\/span><\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="comment"> * Functions used by the parser<\/span><\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<span class="comment"> *************************************************************\/<\/span><\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;<a class="code" href="structRedirect.html">Redirect<\/a> <a class="code" href="parsing__interface_8h.html#a37ef8319c5cfcaa8f21a830f6717fae1">mk_redirect<\/a>(<span class="keywordtype">char<\/span>* <a class="code" href="structRedirect.html#ab0e76f7e58a26d52216c8c4bfc9c2e83">in<\/a>, <span class="keywordtype">char<\/span>* <a class="code" href="structRedirect.html#a9d5efc0a96275e13eba0e71450771952">out<\/a>, <span class="keywordtype">bool<\/span> <a class="code" href="structRedirect.html#aea1d3bd9c3b6e1dbf1661b616df9818e">append<\/a>);<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;<span class="keywordtype">char<\/span>* <a class="code" href="parsing__interface_8h.html#a2bb35c1ceb1849d252bba600ef33a773">interpret_complex_string_token<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>* str);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;<span class="comment">\/*************************************************************<\/span><\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<span class="comment"> * Functions used by the parser<\/span><\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="comment"> *************************************************************\/<\/span><\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;<a class="code" href="structCommandHolder.html">CommandHolder<\/a>* <a class="code" href="parsing__interface_8h.html#a4fd8141abbb16693685c7c1c75938f96">parse<\/a>(<a class="code" href="structQuashState.html">QuashState<\/a>* state);<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="parsing__interface_8h.html#a659361d40550d9776b6ea7fa69a836ce">destroy_parser<\/a>();<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="structRedirect_html_aea1d3bd9c3b6e1dbf1661b616df9818e"><div class="ttname"><a href="structRedirect.html#aea1d3bd9c3b6e1dbf1661b616df9818e">Redirect::append<\/a><\/div><div class="ttdeci">bool append<\/div><div class="ttdef"><b>Definition:<\/b> parsing_interface.h:24<\/div><\/div>$/;"	a
l00001	doc/html/quash_8h_source.html	/^<a href="quash_8h.html">Go to the documentation of this file.<\/a><div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#ifndef SRC_QUASH_H<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#define SRC_QUASH_H<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;stdbool.h&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;<\/span><\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="execute_8h.html">execute.h<\/a>&quot;<\/span><\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="structQuashState.html">   19<\/a><\/span>&#160;<span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="structQuashState.html">QuashState<\/a> {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno"><a class="line" href="structQuashState.html#a7db3a718696ee9d0c7f8b649ccb88bb4">   20<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="structQuashState.html#a7db3a718696ee9d0c7f8b649ccb88bb4">running<\/a>;     <\/div><div class="line"><a name="l00021"><\/a><span class="lineno"><a class="line" href="structQuashState.html#a6d92242ecd91c33779ea2deae58956bf">   21<\/a><\/span>&#160;  <span class="keywordtype">bool<\/span> <a class="code" href="structQuashState.html#a6d92242ecd91c33779ea2deae58956bf">is_a_tty<\/a>;    <\/div><div class="line"><a name="l00023"><\/a><span class="lineno"><a class="line" href="structQuashState.html#a69d0ad3cb3bf44a92459020d98814f7e">   23<\/a><\/span>&#160;  <span class="keywordtype">char<\/span>* <a class="code" href="structQuashState.html#a69d0ad3cb3bf44a92459020d98814f7e">parsed_str<\/a>; <\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;} <a class="code" href="quash_8h.html#a136a489a4e9b848158123d54d0e76f06">QuashState<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="quash_8h.html#a52e7329f9f0f1beccbcc84378c1cb748">is_tty<\/a>();<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keywordtype">char<\/span>* <a class="code" href="quash_8h.html#ab43880685b2507434e4a84f2cb9d54d4">get_command_string<\/a>();<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;<span class="keywordtype">bool<\/span> <a class="code" href="quash_8h.html#a61da580fc69a74f3ef17956ba5fd88a0">is_running<\/a>();<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;<span class="keywordtype">void<\/span> <a class="code" href="quash_8h.html#a4d364efdccd1dec2290413c6ae28959c">end_main_loop<\/a>();<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="preprocessor">#endif \/\/ QUASH_H<\/span><\/div><div class="ttc" id="structQuashState_html_a69d0ad3cb3bf44a92459020d98814f7e"><div class="ttname"><a href="structQuashState.html#a69d0ad3cb3bf44a92459020d98814f7e">QuashState::parsed_str<\/a><\/div><div class="ttdeci">char * parsed_str<\/div><div class="ttdef"><b>Definition:<\/b> quash.h:23<\/div><\/div>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[BASH]$ .\/quash<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Welcome...<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ exit<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[BASH]$ .\/quash<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;Welcome...<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ quit<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[BASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ cat src\/quash.c | grep running<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/\/ Check if loop is running<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;bool is_running() {<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;  return state.running;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;  state.running = false;<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;  while (is_running()) {<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ cat src\/quash.c | grep running | grep return<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;  return state.running;<\/div><\/div><!-- fragment --><h3>Built-in Functions<\/h3>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ cd ..              # Go up one directory<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;\/home<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ cd $HOME           # Go to path in the HOME environment variable<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo Hello Quash! &gt; a.txt  # Write &quot;Hello Quash!\\n&quot; to a file<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;[QUASH]$ cat a.txt<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;Hello Quash!<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo Hey Quash! &gt; a.txt  # Truncate the previous contents of a.txt and write &quot;Hey Quash!\\n&quot; to the file<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ cat a.txt          # Print file contents. If we didn&#39;t actually truncate we would see &quot;Hey Quash!h!\\n&quot; as the output of this command.<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ cat &lt; a.txt        # Make cat read from a.txt via standard in<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;[QUASH]$ cat &lt; a.txt &gt; b.txt  # Multiple redirect. Read from a.txt and write to b.txt.<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;[QUASH]$ cat b.txt<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;[QUASH]$ cat a.txt &gt;&gt; b.txt  # Append output of a.txt to b.txt<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;[QUASH]$ cat b.txt<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;Hey Quash!<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ echo Hello world! &#39;How are you today?&#39;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Hello world! How are you today?<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ echo $HOME\/Development<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/home\/jrobinson\/Development<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ export PATH=\/usr\/bin:\/bin  # Set the PATH environment variable<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;[QUASH]$ echo $PATH                 # Print the current value of PATH<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;\/usr\/bin:\/bin<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;[QUASH]$ echo $HOME<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ export PATH=$HOME  # Set the PATH environment variable to the value of HOME<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[QUASH]$ echo $PATH         # Print the current value of PATH<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ find -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Background job started: [1]    2342    find \/ -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ sleep 15 &amp;<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;Background job started: [2]    2343    sleep 15 &amp;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ jobs               # List currently running background jobs<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[1]    2342    find \/ -type f | grep &#39;*.c&#39; &gt; out.txt &amp;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;[2]    2343    sleep 15 &amp;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><h2>Useful Functions in the Quash Skeleton<\/h2>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ program1 &amp;<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;Background job started: [1]    2342    program1 &amp;<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ ls<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;Documents Downloads<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;Completed: [1]    2342    program1 &amp;<\/div><\/div><!-- fragment --><ul>$/;"	a
l00001	quash_description.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;[QUASH]$ pwd                # Print the working directory<\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;[QUASH]$ echo $PWD          # Print the PWD environment variable<\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;[QUASH]$ export PWD=\/usr    # Change the PWD environment variable<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;[QUASH]$ pwd<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;\/home\/jrobinson<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;[QUASH]$ echo $PWD<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;\/usr<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;[QUASH]$<\/div><\/div><!-- fragment --><ul>$/;"	a
latex_count	doc/latex/Makefile	/^	latex_count=8 ; \\$/;"	m
left:10px	doc/html/search/search.css	/^    left:10px;$/;"	s
letter_C	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_C"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;C&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_E	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_E"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;E&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_G	doc/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_G"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;G&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_K	doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="structCommandHolder.html">CommandHolder<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_K"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;K&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_M	doc/html/classes.html	/^<\/td><td valign="top"><a class="el" href="structExportCommand.html">ExportCommand<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_M"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;M&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_Q	doc/html/classes.html	/^<tr><td valign="top"><a class="el" href="unionCommand.html">Command<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="structGenericCommand.html">GenericCommand<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_Q"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;Q&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_R	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_R"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;R&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_S	doc/html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_S"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;S&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
line-height:30px	doc/html/doxygen.css	/^	line-height:30px;$/;"	s
lookup_env	src/execute.c	/^const char* lookup_env(const char* env_var) {$/;"	f
main	src/quash.c	/^int main(int argc, char** argv) {$/;"	f
main	test-cases/test-setup/delayed_echo.c	/^int main(int argc, char** argv) {$/;"	f
margin-left: 3	doc/html/doxygen.css	/^        margin-left: 3%;$/;"	s
margin-right: 3	doc/html/doxygen.css	/^        margin-right: 3%;$/;"	s
margin:  0px	doc/html/doxygen.css	/^	margin:  0px;$/;"	s
margin: 0px	doc/html/doxygen.css	/^	margin: 0px;$/;"	s
margin:0px	doc/html/doxygen.css	/^	margin:0px;$/;"	s
memory_pool_alloc	src/parsing/memory_pool.c	/^void* memory_pool_alloc(size_t size) {$/;"	f
memory_pool_strdup	src/parsing/memory_pool.c	/^char* memory_pool_strdup(const char* str) {$/;"	f
mk_cd_command	src/command.c	/^Command mk_cd_command(char* dir) {$/;"	f
mk_command_holder	src/command.c	/^CommandHolder mk_command_holder(char* redirect_in,$/;"	f
mk_echo_command	src/command.c	/^Command mk_echo_command(char** strs) {$/;"	f
mk_eoc	src/command.c	/^Command mk_eoc() {$/;"	f
mk_exit_command	src/command.c	/^Command mk_exit_command() {$/;"	f
mk_export_command	src/command.c	/^Command mk_export_command(char* env_var, char* val) {$/;"	f
mk_generic_command	src/command.c	/^Command mk_generic_command(char** args) {$/;"	f
mk_jobs_command	src/command.c	/^Command mk_jobs_command() {$/;"	f
mk_kill_command	src/command.c	/^Command mk_kill_command(char* sig, char* job) {$/;"	f
mk_pwd_command	src/command.c	/^Command mk_pwd_command() {$/;"	f
mk_redirect	src/parsing/parsing_interface.c	/^Redirect mk_redirect(char* in, char* out, bool append) {$/;"	f
nav_h.png	doc/html/doxygen.css	/^        background-image:url('nav_h.png');$/;"	s
nested-classes	doc/html/command_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/deque_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/group__DEQUE.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/parsing__interface_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
nested-classes	doc/html/quash_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
next	src/parsing/memory_pool.c	/^  void* next;  \/**< The next pointer to be returned from an allocation *\/$/;"	m	struct:MemoryPool	file:
no-repeat	doc/html/search/search.css	/^    background:url('search_l.png') no-repeat;$/;"	s
note_result	run_tests.bash	/^note_result() {$/;"	f
out	src/parsing/parsing_interface.h	/^  char* out;   \/**< File name for redirect out. *\/$/;"	m	struct:Redirect
outline: none	doc/html/doxygen.css	/^	outline: none;$/;"	s
output_diff	run_tests.bash	/^output_diff() {$/;"	f
overflow:hidden	doc/html/doxygen.css	/^	overflow:hidden;$/;"	s
p	doc/html/doxygen.css	/^body, table, div, p, dl {$/;"	s
p.enddd 	doc/html/doxygen.css	/^p.enddd {$/;"	s
p.endli 	doc/html/doxygen.css	/^p.endli {$/;"	s
p.endtd 	doc/html/doxygen.css	/^p.endtd {$/;"	s
p.formulaDsp 	doc/html/doxygen.css	/^p.formulaDsp {$/;"	s
p.startdd 	doc/html/doxygen.css	/^p.startli, p.startdd {$/;"	s
p.startli	doc/html/doxygen.css	/^p.startli, p.startdd {$/;"	s
p.starttd 	doc/html/doxygen.css	/^p.starttd {$/;"	s
padding-left: 0px	doc/html/doxygen.css	/^	padding-left: 0px;$/;"	s
padding-left: 3px	doc/html/doxygen.css	/^        padding-left: 3px;$/;"	s
padding-left:10px	doc/html/doxygen.css	/^	padding-left:10px;$/;"	s
padding-left:10px	doc/html/doxygen.css	/^        padding-left:10px;$/;"	s
padding-right: 5px	doc/html/doxygen.css	/^	padding-right: 5px;$/;"	s
padding-right:15px	doc/html/doxygen.css	/^	padding-right:15px;$/;"	s
padding-right:15px	doc/html/doxygen.css	/^        padding-right:15px;$/;"	s
padding: 0	doc/html/doxygen.css	/^        padding: 0;$/;"	s
padding: 0px	doc/html/doxygen.css	/^	padding: 0px;$/;"	s
padding: 2px 0px	doc/html/doxygen.css	/^	padding: 2px 0px;$/;"	s
padding:0px	doc/html/doxygen.css	/^	padding:0px;$/;"	s
parse	src/parsing/parsing_interface.c	/^CommandHolder* parse(QuashState* state) {$/;"	f
parsed_str	src/quash.h	/^  char* parsed_str; \/**< Holds a string representing the parsed structure of the$/;"	m	struct:QuashState
pool	src/parsing/memory_pool.c	/^  void* pool;  \/**< Pointer to the top of the memory pool *\/$/;"	m	struct:MemoryPool	file:
pool_deq	src/parsing/memory_pool.c	/^static MemoryPoolDeque pool_deq = { NULL, 0, 0, 0, NULL };$/;"	v	file:
position:absolute	doc/html/search/search.css	/^    position:absolute;$/;"	s
pre.fragment 	doc/html/doxygen.css	/^pre.fragment {$/;"	s
print_job	src/execute.c	/^void print_job(int job_id, pid_t pid, const char* cmd) {$/;"	f
print_job_bg_complete	src/execute.c	/^void print_job_bg_complete(int job_id, pid_t pid, const char* cmd) {$/;"	f
print_job_bg_start	src/execute.c	/^void print_job_bg_start(int job_id, pid_t pid, const char* cmd) {$/;"	f
print_prompt	src/quash.c	/^static void print_prompt() {$/;"	f	file:
pub-attribs	doc/html/structCDCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structCommandHolder.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structExample.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structExportCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structGenericCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structKillCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structMemoryPool.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structQuashState.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structRedirect.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/structSimpleCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doc/html/unionCommand.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"><\/a>$/;"	a
pwd	src/command.h	/^  PWDCommand pwd;         \/**< Read structure as a @a PWDCommand *\/$/;"	m	union:Command
redir	src/parsing/parse.y	/^redir: redir_inner {$/;"	l
redir_inner	src/parsing/parse.y	/^redir_inner: redir_mark string redir_inner {$/;"	l
redir_mark	src/parsing/parse.y	/^redir_mark: REDIRIN {$/;"	l
redirect	src/parsing/parse.tab.c	/^  Redirect redirect;$/;"	m	union:YYSTYPE	file:
redirect	src/parsing/parse.tab.h	/^  Redirect redirect;$/;"	m	union:YYSTYPE
redirect_in	src/command.h	/^  char* redirect_in;  \/**< Redirect standard in of this command to a file name$/;"	m	struct:CommandHolder
redirect_out	src/command.h	/^  char* redirect_out; \/**< Redirect standard out of this command to a file name$/;"	m	struct:CommandHolder
rial	doc/html/doxygen.css	/^	font-family: 'Lucida Grande',Geneva,Helvetica,Arial,sans-serif;$/;"	s
run_cd	src/execute.c	/^void run_cd(CDCommand cmd) {$/;"	f
run_echo	src/execute.c	/^void run_echo(EchoCommand cmd) {$/;"	f
run_export	src/execute.c	/^void run_export(ExportCommand cmd) {$/;"	f
run_generic	src/execute.c	/^void run_generic(GenericCommand cmd) {$/;"	f
run_jobs	src/execute.c	/^void run_jobs() {$/;"	f
run_kill	src/execute.c	/^void run_kill(KillCommand cmd) {$/;"	f
run_pwd	src/execute.c	/^void run_pwd() {$/;"	f
run_script	src/execute.c	/^void run_script(CommandHolder* holders) {$/;"	f
run_test_checked	run_tests.bash	/^run_test_checked() {$/;"	f
run_test_setup_cmd	run_tests.bash	/^run_test_setup_cmd() {$/;"	f
run_test_setup_script	run_tests.bash	/^run_test_setup_script() {$/;"	f
run_test_unchecked	run_tests.bash	/^run_test_unchecked() {$/;"	f
running	src/quash.h	/^  bool running;     \/**< Indicates if Quash should keep accept more input *\/$/;"	m	struct:QuashState
searchData	doc/html/search/all_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_11.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_12.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_13.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_14.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_15.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/all_f.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/classes_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/defines_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/enums_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/files_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/functions_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/groups_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/typedefs_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_0.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_1.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_10.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_2.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_3.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_4.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_5.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_6.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_7.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_8.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_9.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_a.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_b.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_c.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_d.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_e.js	/^var searchData=$/;"	v
searchData	doc/html/search/variables_f.js	/^var searchData=$/;"	v
search_l.png	doc/html/search/search.css	/^    background:url('search_l.png') no-repeat;$/;"	s
setClassAttr	doc/html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	doc/html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setup_sandbox	run_tests.bash	/^setup_sandbox() {$/;"	f
short	src/parsing/parse.tab.c	191;"	d	file:
sig	src/command.h	/^  int sig;          \/**< Signal to send to the job *\/$/;"	m	struct:KillCommand
sig_str	src/command.h	/^  char* sig_str;    \/**< String holding the signal number (used for printing) *\/$/;"	m	struct:KillCommand
simple	src/command.h	/^  SimpleCommand simple;   \/**< Read structure as a @a SimpleCommand *\/$/;"	m	union:Command
size	src/parsing/memory_pool.c	/^  size_t size; \/**< Size of the memory pool in bytes *\/$/;"	m	struct:MemoryPool	file:
span.SRScope 	doc/html/search/search.css	/^span.SRScope {$/;"	s
span.SelectionMark 	doc/html/search/search.css	/^span.SelectionMark {$/;"	s
span.ah 	doc/html/doxygen.css	/^div.ah, span.ah {$/;"	s
span.charliteral 	doc/html/doxygen.css	/^span.charliteral {$/;"	s
span.comment 	doc/html/doxygen.css	/^span.comment {$/;"	s
span.keyword 	doc/html/doxygen.css	/^span.keyword {$/;"	s
span.keywordflow 	doc/html/doxygen.css	/^span.keywordflow {$/;"	s
span.keywordtype 	doc/html/doxygen.css	/^span.keywordtype {$/;"	s
span.legend 	doc/html/doxygen.css	/^span.legend {$/;"	s
span.lineno 	doc/html/doxygen.css	/^span.lineno {$/;"	s
span.lineno a 	doc/html/doxygen.css	/^span.lineno a {$/;"	s
span.lineno a:hover 	doc/html/doxygen.css	/^span.lineno a:hover {$/;"	s
span.mlabel 	doc/html/doxygen.css	/^span.mlabel {$/;"	s
span.mlabels 	doc/html/doxygen.css	/^span.mlabels {$/;"	s
span.preprocessor 	doc/html/doxygen.css	/^span.preprocessor {$/;"	s
span.stringliteral 	doc/html/doxygen.css	/^span.stringliteral {$/;"	s
span.vhdlchar 	doc/html/doxygen.css	/^span.vhdlchar { $/;"	s
span.vhdldigit 	doc/html/doxygen.css	/^span.vhdldigit { $/;"	s
span.vhdlkeyword 	doc/html/doxygen.css	/^span.vhdlkeyword { $/;"	s
span.vhdllogic 	doc/html/doxygen.css	/^span.vhdllogic { $/;"	s
special_string	src/parsing/parse.y	/^special_string: ECHO_TOK {$/;"	l
src Directory Reference	doc/latex/dir_68267d1309a1af8e8297ef4c3efbcdba.tex	/^\\hypertarget{dir_68267d1309a1af8e8297ef4c3efbcdba}{}\\section{src Directory Reference}$/;"	s
src command c File Reference	doc/latex/command_8c.tex	/^\\hypertarget{command_8c}{}\\section{src\/command.c File Reference}$/;"	s
src command h File Reference	doc/latex/command_8h.tex	/^\\hypertarget{command_8h}{}\\section{src\/command.h File Reference}$/;"	s
src debug h File Reference	doc/latex/debug_8h.tex	/^\\hypertarget{debug_8h}{}\\section{src\/debug.h File Reference}$/;"	s
src deque h File Reference	doc/latex/deque_8h.tex	/^\\hypertarget{deque_8h}{}\\section{src\/deque.h File Reference}$/;"	s
src execute c File Reference	doc/latex/execute_8c.tex	/^\\hypertarget{execute_8c}{}\\section{src\/execute.c File Reference}$/;"	s
src execute h File Reference	doc/latex/execute_8h.tex	/^\\hypertarget{execute_8h}{}\\section{src\/execute.h File Reference}$/;"	s
src parsing Directory Reference	doc/latex/dir_3fb67633942bd84f7aa391e58ba835b3.tex	/^\\hypertarget{dir_3fb67633942bd84f7aa391e58ba835b3}{}\\section{src\/parsing Directory Reference}$/;"	s
src parsing memory _ pool h File Reference	doc/latex/memory__pool_8h.tex	/^\\hypertarget{memory__pool_8h}{}\\section{src\/parsing\/memory\\+\\_\\+pool.h File Reference}$/;"	s
src parsing parsing _ interface h File Reference	doc/latex/parsing__interface_8h.tex	/^\\hypertarget{parsing__interface_8h}{}\\section{src\/parsing\/parsing\\+\\_\\+interface.h File Reference}$/;"	s
src quash c File Reference	doc/latex/quash_8c.tex	/^\\hypertarget{quash_8c}{}\\section{src\/quash.c File Reference}$/;"	s
src quash h File Reference	doc/latex/quash_8h.tex	/^\\hypertarget{quash_8h}{}\\section{src\/quash.h File Reference}$/;"	s
state	src/quash.c	/^static QuashState state;$/;"	v	file:
str	src/parsing/parse.tab.c	/^  char* str;$/;"	m	union:YYSTYPE	file:
str	src/parsing/parse.tab.h	/^  char* str;$/;"	m	union:YYSTYPE
string	src/parsing/parse.y	/^string: first_string {$/;"	l
strip_extension	run_tests.bash	/^strip_extension() {$/;"	f
strip_path	run_tests.bash	/^strip_path() {$/;"	f
subdirs	doc/html/dir_68267d1309a1af8e8297ef4c3efbcdba.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="subdirs"><\/a>$/;"	a
tab_b.png	doc/html/doxygen.css	/^	background-image:url('tab_b.png');$/;"	s
table	doc/html/doxygen.css	/^body, table, div, p, dl {$/;"	s
table.classindex{        margin: 10px	doc/html/doxygen.css	/^        margin: 10px;$/;"	s
table.directory 	doc/html/doxygen.css	/^table.directory {$/;"	s
table.doxtable 	doc/html/doxygen.css	/^table.doxtable {$/;"	s
table.doxtable caption 	doc/html/doxygen.css	/^table.doxtable caption {$/;"	s
table.doxtable td	doc/html/doxygen.css	/^table.doxtable td, table.doxtable th {$/;"	s
table.doxtable th 	doc/html/doxygen.css	/^table.doxtable td, table.doxtable th {$/;"	s
table.doxtable th 	doc/html/doxygen.css	/^table.doxtable th {$/;"	s
table.fieldtable 	doc/html/doxygen.css	/^table.fieldtable {$/;"	s
table.memberdecls 	doc/html/doxygen.css	/^table.memberdecls {$/;"	s
table.mlabels 	doc/html/doxygen.css	/^table.mlabels {$/;"	s
td.indexkey 	doc/html/doxygen.css	/^td.indexkey {$/;"	s
td.indexvalue 	doc/html/doxygen.css	/^td.indexvalue {$/;"	s
td.mlabels-left 	doc/html/doxygen.css	/^td.mlabels-left {$/;"	s
td.mlabels-right 	doc/html/doxygen.css	/^td.mlabels-right {$/;"	s
td.tiny 	doc/html/doxygen.css	/^td.tiny {$/;"	s
texorpdfstring C D Command CDCommand	doc/latex/command_8h.tex	/^\\index{C\\+D\\+Command@{C\\+D\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Command Command	doc/latex/command_8h.tex	/^\\index{Command@{Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Command Holder CommandHolder	doc/latex/command_8h.tex	/^\\index{Command\\+Holder@{Command\\+Holder}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Command Type CommandType	doc/latex/command_8h.tex	/^\\index{Command\\+Type@{Command\\+Type}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring E O C Command EOCCommand	doc/latex/command_8h.tex	/^\\index{E\\+O\\+C\\+Command@{E\\+O\\+C\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Echo Command EchoCommand	doc/latex/command_8h.tex	/^\\index{Echo\\+Command@{Echo\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Exit Command ExitCommand	doc/latex/command_8h.tex	/^\\index{Exit\\+Command@{Exit\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Export Command ExportCommand	doc/latex/command_8h.tex	/^\\index{Export\\+Command@{Export\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Generic Command GenericCommand	doc/latex/command_8h.tex	/^\\index{Generic\\+Command@{Generic\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring I F D E B UG IFDEBUG	doc/latex/debug_8h.tex	/^\\index{I\\+F\\+D\\+E\\+B\\+UG@{I\\+F\\+D\\+E\\+B\\+UG}!debug.\\+h@{debug.\\+h}}$/;"	b
texorpdfstring Jobs Command JobsCommand	doc/latex/command_8h.tex	/^\\index{Jobs\\+Command@{Jobs\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Kill Command KillCommand	doc/latex/command_8h.tex	/^\\index{Kill\\+Command@{Kill\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring P R I N T _ D E B UG PRINT _DEBUG	doc/latex/debug_8h.tex	/^\\index{P\\+R\\+I\\+N\\+T\\+\\_\\+\\+D\\+E\\+B\\+UG@{P\\+R\\+I\\+N\\+T\\+\\_\\+\\+D\\+E\\+B\\+UG}!debug.\\+h@{debug.\\+h}}$/;"	b
texorpdfstring P W D Command PWDCommand	doc/latex/command_8h.tex	/^\\index{P\\+W\\+D\\+Command@{P\\+W\\+D\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring Simple Command SimpleCommand	doc/latex/command_8h.tex	/^\\index{Simple\\+Command@{Simple\\+Command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring append append	doc/latex/structRedirect.tex	/^\\index{append@{append}!Redirect@{Redirect}}$/;"	b
texorpdfstring args args	doc/latex/structGenericCommand.tex	/^\\index{args@{args}!Generic\\+Command@{Generic\\+Command}}$/;"	b
texorpdfstring back back	doc/latex/structExample.tex	/^\\index{back@{back}!Example@{Example}}$/;"	b
texorpdfstring cap cap	doc/latex/structExample.tex	/^\\index{cap@{cap}!Example@{Example}}$/;"	b
texorpdfstring cd cd	doc/latex/unionCommand.tex	/^\\index{cd@{cd}!Command@{Command}}$/;"	b
texorpdfstring cmd cmd	doc/latex/structCommandHolder.tex	/^\\index{cmd@{cmd}!Command\\+Holder@{Command\\+Holder}}$/;"	b
texorpdfstring data data	doc/latex/structExample.tex	/^\\index{data@{data}!Example@{Example}}$/;"	b
texorpdfstring debug _ print _ script const Command Holder $ ast$holders debug _print _script const CommandHolder holders	doc/latex/command_8h.tex	/^\\index{debug\\+\\_\\+print\\+\\_\\+script@{debug\\+\\_\\+print\\+\\_\\+script}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring destructor destructor	doc/latex/structExample.tex	/^\\index{destructor@{destructor}!Example@{Example}}$/;"	b
texorpdfstring dir dir	doc/latex/structCDCommand.tex	/^\\index{dir@{dir}!C\\+D\\+Command@{C\\+D\\+Command}}$/;"	b
texorpdfstring echo echo	doc/latex/unionCommand.tex	/^\\index{echo@{echo}!Command@{Command}}$/;"	b
texorpdfstring env _ var env _var	doc/latex/structExportCommand.tex	/^\\index{env\\+\\_\\+var@{env\\+\\_\\+var}!Export\\+Command@{Export\\+Command}}$/;"	b
texorpdfstring eoc eoc	doc/latex/unionCommand.tex	/^\\index{eoc@{eoc}!Command@{Command}}$/;"	b
texorpdfstring exit exit	doc/latex/unionCommand.tex	/^\\index{exit@{exit}!Command@{Command}}$/;"	b
texorpdfstring export export	doc/latex/unionCommand.tex	/^\\index{export@{export}!Command@{Command}}$/;"	b
texorpdfstring flags flags	doc/latex/structCommandHolder.tex	/^\\index{flags@{flags}!Command\\+Holder@{Command\\+Holder}}$/;"	b
texorpdfstring front front	doc/latex/structExample.tex	/^\\index{front@{front}!Example@{Example}}$/;"	b
texorpdfstring generic generic	doc/latex/unionCommand.tex	/^\\index{generic@{generic}!Command@{Command}}$/;"	b
texorpdfstring get _ command _ holder _ type Command Holder holder get _command _holder _type CommandHolder holder	doc/latex/command_8h.tex	/^\\index{get\\+\\_\\+command\\+\\_\\+holder\\+\\_\\+type@{get\\+\\_\\+command\\+\\_\\+holder\\+\\_\\+type}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring get _ command _ type Command cmd get _command _type Command cmd	doc/latex/command_8h.tex	/^\\index{get\\+\\_\\+command\\+\\_\\+type@{get\\+\\_\\+command\\+\\_\\+type}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring in in	doc/latex/structRedirect.tex	/^\\index{in@{in}!Redirect@{Redirect}}$/;"	b
texorpdfstring is _ a _ tty is _a _tty	doc/latex/structQuashState.tex	/^\\index{is\\+\\_\\+a\\+\\_\\+tty@{is\\+\\_\\+a\\+\\_\\+tty}!Quash\\+State@{Quash\\+State}}$/;"	b
texorpdfstring job _ str job _str	doc/latex/structKillCommand.tex	/^\\index{job\\+\\_\\+str@{job\\+\\_\\+str}!Kill\\+Command@{Kill\\+Command}}$/;"	b
texorpdfstring job job	doc/latex/structKillCommand.tex	/^\\index{job@{job}!Kill\\+Command@{Kill\\+Command}}$/;"	b
texorpdfstring jobs jobs	doc/latex/unionCommand.tex	/^\\index{jobs@{jobs}!Command@{Command}}$/;"	b
texorpdfstring kill kill	doc/latex/unionCommand.tex	/^\\index{kill@{kill}!Command@{Command}}$/;"	b
texorpdfstring mk _ cd _ command char $ ast$dir mk _cd _command char dir	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+cd\\+\\_\\+command@{mk\\+\\_\\+cd\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ command _ holder char $ ast$redirect _ in char $ ast$redirect _ out char flags Command cmd mk _command _holder char redirect _in char redirect _out char flags Command cmd	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+command\\+\\_\\+holder@{mk\\+\\_\\+command\\+\\_\\+holder}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ echo _ command char $ ast$$ ast$args mk _echo _command char args	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+echo\\+\\_\\+command@{mk\\+\\_\\+echo\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ eoc mk _eoc	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+eoc@{mk\\+\\_\\+eoc}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ exit _ command mk _exit _command	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+exit\\+\\_\\+command@{mk\\+\\_\\+exit\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ export _ command char $ ast$env _ var char $ ast$val mk _export _command char env _var char val	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+export\\+\\_\\+command@{mk\\+\\_\\+export\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ generic _ command char $ ast$$ ast$args mk _generic _command char args	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+generic\\+\\_\\+command@{mk\\+\\_\\+generic\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ jobs _ command mk _jobs _command	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+jobs\\+\\_\\+command@{mk\\+\\_\\+jobs\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ kill _ command char $ ast$sig char $ ast$job mk _kill _command char sig char job	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+kill\\+\\_\\+command@{mk\\+\\_\\+kill\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring mk _ pwd _ command mk _pwd _command	doc/latex/command_8h.tex	/^\\index{mk\\+\\_\\+pwd\\+\\_\\+command@{mk\\+\\_\\+pwd\\+\\_\\+command}!command.\\+h@{command.\\+h}}$/;"	b
texorpdfstring next next	doc/latex/structMemoryPool.tex	/^\\index{next@{next}!Memory\\+Pool@{Memory\\+Pool}}$/;"	b
texorpdfstring out out	doc/latex/structRedirect.tex	/^\\index{out@{out}!Redirect@{Redirect}}$/;"	b
texorpdfstring parsed _ str parsed _str	doc/latex/structQuashState.tex	/^\\index{parsed\\+\\_\\+str@{parsed\\+\\_\\+str}!Quash\\+State@{Quash\\+State}}$/;"	b
texorpdfstring pool pool	doc/latex/structMemoryPool.tex	/^\\index{pool@{pool}!Memory\\+Pool@{Memory\\+Pool}}$/;"	b
texorpdfstring pwd pwd	doc/latex/unionCommand.tex	/^\\index{pwd@{pwd}!Command@{Command}}$/;"	b
texorpdfstring redirect _ in redirect _in	doc/latex/structCommandHolder.tex	/^\\index{redirect\\+\\_\\+in@{redirect\\+\\_\\+in}!Command\\+Holder@{Command\\+Holder}}$/;"	b
texorpdfstring redirect _ out redirect _out	doc/latex/structCommandHolder.tex	/^\\index{redirect\\+\\_\\+out@{redirect\\+\\_\\+out}!Command\\+Holder@{Command\\+Holder}}$/;"	b
texorpdfstring running running	doc/latex/structQuashState.tex	/^\\index{running@{running}!Quash\\+State@{Quash\\+State}}$/;"	b
texorpdfstring sig _ str sig _str	doc/latex/structKillCommand.tex	/^\\index{sig\\+\\_\\+str@{sig\\+\\_\\+str}!Kill\\+Command@{Kill\\+Command}}$/;"	b
texorpdfstring sig sig	doc/latex/structKillCommand.tex	/^\\index{sig@{sig}!Kill\\+Command@{Kill\\+Command}}$/;"	b
texorpdfstring simple simple	doc/latex/unionCommand.tex	/^\\index{simple@{simple}!Command@{Command}}$/;"	b
texorpdfstring size size	doc/latex/structMemoryPool.tex	/^\\index{size@{size}!Memory\\+Pool@{Memory\\+Pool}}$/;"	b
texorpdfstring type type	doc/latex/structCDCommand.tex	/^\\index{type@{type}!C\\+D\\+Command@{C\\+D\\+Command}}$/;"	b
texorpdfstring type type	doc/latex/structExportCommand.tex	/^\\index{type@{type}!Export\\+Command@{Export\\+Command}}$/;"	b
texorpdfstring type type	doc/latex/structGenericCommand.tex	/^\\index{type@{type}!Generic\\+Command@{Generic\\+Command}}$/;"	b
texorpdfstring type type	doc/latex/structKillCommand.tex	/^\\index{type@{type}!Kill\\+Command@{Kill\\+Command}}$/;"	b
texorpdfstring type type	doc/latex/structSimpleCommand.tex	/^\\index{type@{type}!Simple\\+Command@{Simple\\+Command}}$/;"	b
texorpdfstring val val	doc/latex/structExportCommand.tex	/^\\index{val@{val}!Export\\+Command@{Export\\+Command}}$/;"	b
text-align: left	doc/html/doxygen.css	/^	text-align: left;$/;"	s
text-align: right	doc/html/doxygen.css	/^	text-align: right;$/;"	s
text-decoration: none	doc/html/doxygen.css	/^	text-decoration: none;        $/;"	s
text-decoration: none	doc/html/doxygen.css	/^	text-decoration: none;$/;"	s
text-shadow: 0px 1px 1px rgba	doc/html/doxygen.css	/^	text-shadow: 0px 1px 1px rgba(255, 255, 255, 0.9);$/;"	s
th.dirtab 	doc/html/doxygen.css	/^th.dirtab {$/;"	s
toggleFolder	doc/html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	doc/html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	doc/html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleVisibility	doc/html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
top	src/parsing/parse.y	/^top: {$/;"	l
top_extract	src/parsing/parse.y	/^top_extract: top EOC_TOK {$/;"	l
tr.heading h2 	doc/html/doxygen.css	/^tr.heading h2 {$/;"	s
tr.memlist 	doc/html/doxygen.css	/^tr.memlist {$/;"	s
type	src/command.h	/^  CommandType type; \/**< Type of command *\/$/;"	m	struct:CDCommand
type	src/command.h	/^  CommandType type; \/**< Type of command *\/$/;"	m	struct:ExportCommand
type	src/command.h	/^  CommandType type; \/**< Type of command *\/$/;"	m	struct:GenericCommand
type	src/command.h	/^  CommandType type; \/**< Type of command *\/$/;"	m	struct:KillCommand
type	src/command.h	/^  CommandType type; \/**< Type of command *\/$/;"	m	struct:SimpleCommand
typedef-members	doc/html/command_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
typedef-members	doc/html/deque_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
typedef-members	doc/html/group__DEQUE.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
typedef-members	doc/html/parsing__interface_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
typedef-members	doc/html/quash_8h.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"><\/a>$/;"	a
unput	src/parsing/lex.yy.c	214;"	d	file:
updateStripes	doc/html/dynsections.js	/^function updateStripes()$/;"	f
usage	run_tests.bash	/^usage() {$/;"	f
val	src/command.h	/^  char* val;        \/**< String that should be stored in @a env_var environment$/;"	m	struct:ExportCommand
valgrind_diff	run_tests.bash	/^valgrind_diff() {$/;"	f
vertical-align: bottom	doc/html/doxygen.css	/^	vertical-align: bottom;$/;"	s
white-space: nowrap	doc/html/doxygen.css	/^        white-space: nowrap;$/;"	s
width: 100	doc/html/doxygen.css	/^	width: 100%;$/;"	s
width: 50	doc/html/doxygen.css	/^	width: 50%;$/;"	s
width: 94	doc/html/doxygen.css	/^        width: 94%;$/;"	s
width:20px	doc/html/search/search.css	/^    width:20px;$/;"	s
write_env	src/execute.c	/^void write_env(const char* env_var, const char* val) {$/;"	f
yy_accept	src/parsing/lex.yy.c	/^static yyconst flex_int16_t yy_accept[57] =$/;"	v	file:
yy_at_bol	src/parsing/lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	src/parsing/lex.yy.c	/^static yyconst flex_uint16_t yy_base[62] =$/;"	v	file:
yy_bs_column	src/parsing/lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	src/parsing/lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	src/parsing/lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	src/parsing/lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	src/parsing/lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	src/parsing/lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	src/parsing/lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	src/parsing/lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	src/parsing/lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	src/parsing/lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	src/parsing/lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	src/parsing/lex.yy.c	/^static yyconst flex_int16_t yy_chk[166] =$/;"	v	file:
yy_create_buffer	src/parsing/lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	src/parsing/lex.yy.c	/^static yyconst flex_int16_t yy_def[62] =$/;"	v	file:
yy_delete_buffer	src/parsing/lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	src/parsing/lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	src/parsing/lex.yy.c	/^static yyconst YY_CHAR yy_ec[256] =$/;"	v	file:
yy_fatal_error	src/parsing/lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	src/parsing/lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	src/parsing/lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	src/parsing/lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	src/parsing/lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	src/parsing/lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	src/parsing/lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	src/parsing/lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	src/parsing/lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	src/parsing/lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	src/parsing/lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	src/parsing/lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	src/parsing/lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	src/parsing/lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	src/parsing/lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	src/parsing/lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	src/parsing/lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	src/parsing/lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	src/parsing/lex.yy.c	/^static yyconst YY_CHAR yy_meta[33] =$/;"	v	file:
yy_n_chars	src/parsing/lex.yy.c	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	src/parsing/lex.yy.c	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	src/parsing/lex.yy.c	338;"	d	file:
yy_nxt	src/parsing/lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	src/parsing/lex.yy.c	/^static yyconst flex_uint16_t yy_nxt[166] =$/;"	v	file:
yy_reduce_print	src/parsing/parse.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, CommandHolder** __ret_cmds)$/;"	f	file:
yy_rule_can_match_eol	src/parsing/lex.yy.c	/^static yyconst flex_int32_t yy_rule_can_match_eol[23] =$/;"	v	file:
yy_scan_buffer	src/parsing/lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	src/parsing/lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_string	src/parsing/lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	src/parsing/lex.yy.c	350;"	d	file:
yy_set_interactive	src/parsing/lex.yy.c	340;"	d	file:
yy_size_t	src/parsing/lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	src/parsing/parse.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	src/parsing/lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	src/parsing/lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	src/parsing/lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	src/parsing/parse.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, CommandHolder** __ret_cmds)$/;"	f	file:
yy_symbol_value_print	src/parsing/parse.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, CommandHolder** __ret_cmds)$/;"	f	file:
yy_trans_info	src/parsing/lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	src/parsing/lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	src/parsing/lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	src/parsing/lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	src/parsing/parse.tab.c	/^union yyalloc$/;"	u	file:
yychar	src/parsing/parse.tab.c	/^int yychar;$/;"	v
yycheck	src/parsing/parse.tab.c	/^static const yytype_uint8 yycheck[] =$/;"	v	file:
yyclearin	src/parsing/parse.tab.c	626;"	d	file:
yyconst	src/parsing/lex.yy.c	107;"	d	file:
yyconst	src/parsing/lex.yy.c	109;"	d	file:
yydebug	src/parsing/parse.tab.c	/^int yydebug;$/;"	v
yydefact	src/parsing/parse.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	src/parsing/parse.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	src/parsing/parse.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, CommandHolder** __ret_cmds)$/;"	f	file:
yyensure_buffer_stack	src/parsing/lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	src/parsing/parse.tab.c	625;"	d	file:
yyerror	src/parsing/parse.tab.c	/^void yyerror(CommandHolder** cmds, char *str) {$/;"	f
yyerrstatus	src/parsing/parse.tab.c	/^int yyerrstatus = 0;$/;"	v
yyfree	src/parsing/lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	src/parsing/lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	src/parsing/lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	src/parsing/lex.yy.c	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	src/parsing/lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	src/parsing/lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	src/parsing/lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	src/parsing/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	src/parsing/lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	src/parsing/lex.yy.c	/^yy_size_t yyleng;$/;"	v
yyless	src/parsing/lex.yy.c	1733;"	d	file:
yyless	src/parsing/lex.yy.c	1734;"	d	file:
yyless	src/parsing/lex.yy.c	201;"	d	file:
yylex_destroy	src/parsing/lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	src/parsing/lex.yy.c	/^int yylineno = 1;$/;"	v
yylval	src/parsing/parse.tab.c	/^YYSTYPE yylval;$/;"	v
yymore	src/parsing/lex.yy.c	542;"	d	file:
yynerrs	src/parsing/parse.tab.c	/^int yynerrs;$/;"	v
yyout	src/parsing/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	src/parsing/parse.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact_value_is_default	src/parsing/parse.tab.c	522;"	d	file:
yyparse	src/parsing/parse.tab.c	/^yyparse (CommandHolder** __ret_cmds)$/;"	f
yypgoto	src/parsing/parse.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	src/parsing/lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yypush_buffer_state	src/parsing/lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	src/parsing/parse.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	src/parsing/parse.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	src/parsing/lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	src/parsing/lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrline	src/parsing/parse.tab.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	src/parsing/lex.yy.c	/^void yyset_debug (int  _bdebug )$/;"	f
yyset_in	src/parsing/lex.yy.c	/^void yyset_in (FILE *  _in_str )$/;"	f
yyset_lineno	src/parsing/lex.yy.c	/^void yyset_lineno (int  _line_number )$/;"	f
yyset_out	src/parsing/lex.yy.c	/^void yyset_out (FILE *  _out_str )$/;"	f
yyss_alloc	src/parsing/parse.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	src/parsing/parse.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	src/parsing/parse.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	src/parsing/parse.tab.c	828;"	d	file:
yystrlen	src/parsing/parse.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	src/parsing/parse.tab.c	812;"	d	file:
yysyntax_error	src/parsing/parse.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	src/parsing/parse.tab.c	/^static const yytype_int8 yytable[] =$/;"	v	file:
yytable_value_is_error	src/parsing/parse.tab.c	527;"	d	file:
yyterminate	src/parsing/lex.yy.c	699;"	d	file:
yytext	src/parsing/lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	src/parsing/lex.yy.c	379;"	d	file:
yytext_ptr	src/parsing/lex.yy.c	381;"	d	file:
yytname	src/parsing/parse.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	src/parsing/parse.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	src/parsing/parse.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	src/parsing/parse.tab.h	/^  enum yytokentype$/;"	g
yytoknum	src/parsing/parse.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	src/parsing/parse.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	src/parsing/parse.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	src/parsing/parse.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	src/parsing/parse.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	src/parsing/parse.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	src/parsing/parse.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	src/parsing/parse.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	src/parsing/parse.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	src/parsing/parse.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	src/parsing/parse.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	src/parsing/lex.yy.c	364;"	d	file:
